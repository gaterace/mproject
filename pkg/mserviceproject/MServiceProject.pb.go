// Copyright 2019-2020 Demian Harvill
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MServiceProject.proto

/*
Package mserviceproject is a generated protocol buffer package.

It is generated from these files:
	MServiceProject.proto

It has these top-level messages:
	Project
	ProjectWrapper
	StatusType
	Task
	TaskWrapper
	TeamMember
	ProjectRoleType
	TaskToMember
	CreateProjectRequest
	CreateProjectResponse
	UpdateProjectRequest
	UpdateProjectResponse
	DeleteProjectRequest
	DeleteProjectResponse
	GetProjectNamesRequest
	GetProjectNamesResponse
	GetProjectByNameRequest
	GetProjectByNameResponse
	GetProjectByIdRequest
	GetProjectByIdResponse
	GetProjectWrapperByNameRequest
	GetProjectWrapperByNameResponse
	GetProjectWrapperByIdRequest
	GetProjectWrapperByIdResponse
	CreateStatusTypeRequest
	CreateStatusTypeResponse
	UpdateStatusTypeRequest
	UpdateStatusTypeResponse
	DeleteStatusTypeRequest
	DeleteStatusTypeResponse
	GetStatusTypeRequest
	GetStatusTypeResponse
	GetStatusTypesRequest
	GetStatusTypesResponse
	CreateTaskRequest
	CreateTaskResponse
	UpdateTaskRequest
	UpdateTaskResponse
	DeleteTaskRequest
	DeleteTaskResponse
	GetTaskByIdRequest
	GetTaskByIdResponse
	GetTaskWrapperByIdRequest
	GetTaskWrapperByIdResponse
	ReorderChildTasksRequest
	ReorderChildTasksResponse
	GetTasksByProjectRequest
	GetTasksByProjectResponse
	CreateTeamMemberRequest
	CreateTeamMemberResponse
	UpdateTeamMemberRequest
	UpdateTeamMemberResponse
	DeleteTeamMemberRequest
	DeleteTeamMemberResponse
	GetTeamMemberByIdRequest
	GetTeamMemberByIdResponse
	GetTeamMemberByProjectRequest
	GetTeamMemberByProjectResponse
	GetTeamMemberByTaskRequest
	GetTeamMemberByTaskResponse
	AddTeamMemberToTaskRequest
	AddTeamMemberToTaskResponse
	RemoveTeamMemberFromTaskRequest
	RemoveTeamMemberFromTaskResponse
	AddTaskHoursRequest
	AddTaskHoursResponse
	CreateProjectRoleTypeRequest
	CreateProjectRoleTypeResponse
	UpdateProjectRoleTypeRequest
	UpdateProjectRoleTypeResponse
	DeleteProjectRoleTypeRequest
	DeleteProjectRoleTypeResponse
	GetProjectRoleTypeRequest
	GetProjectRoleTypeResponse
	GetProjectRoleTypesRequest
	GetProjectRoleTypesResponse
	GetServerVersionRequest
	GetServerVersionResponse
*/
package mserviceproject

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dml "github.com/gaterace/dml-go/pkg/dml"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MService project entity
type Project struct {
	// project identifier
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// mservice account id
	MserviceId int64 `protobuf:"varint,7,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// entity name
	Name string `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	// entity description
	Description string `protobuf:"bytes,9,opt,name=description" json:"description,omitempty"`
	// status identifier
	StatusId int32 `protobuf:"varint,10,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
	// status name
	StatusName string `protobuf:"bytes,11,opt,name=status_name,json=statusName" json:"status_name,omitempty"`
	// project start date
	StartDate *dml.DateTime `protobuf:"bytes,12,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	// project end date
	EndDate *dml.DateTime `protobuf:"bytes,13,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Project) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *Project) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Project) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *Project) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *Project) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *Project) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Project) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Project) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

func (m *Project) GetStatusName() string {
	if m != nil {
		return m.StatusName
	}
	return ""
}

func (m *Project) GetStartDate() *dml.DateTime {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *Project) GetEndDate() *dml.DateTime {
	if m != nil {
		return m.EndDate
	}
	return nil
}

// MService project entity with associations
type ProjectWrapper struct {
	// project identifier
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// mservice account id
	MserviceId int64 `protobuf:"varint,7,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// entity name
	Name string `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	// entity description
	Description string `protobuf:"bytes,9,opt,name=description" json:"description,omitempty"`
	// status identifier
	StatusId int32 `protobuf:"varint,10,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
	// status name
	StatusName string `protobuf:"bytes,11,opt,name=status_name,json=statusName" json:"status_name,omitempty"`
	// project start date
	StartDate *dml.DateTime `protobuf:"bytes,12,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	// project end date
	EndDate *dml.DateTime `protobuf:"bytes,13,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	// list of project team member objects
	TeamMembers []*TeamMember `protobuf:"bytes,14,rep,name=team_members,json=teamMembers" json:"team_members,omitempty"`
	// list of child project task objects with associations
	ChildTaskWrappers []*TaskWrapper `protobuf:"bytes,15,rep,name=child_task_wrappers,json=childTaskWrappers" json:"child_task_wrappers,omitempty"`
}

func (m *ProjectWrapper) Reset()                    { *m = ProjectWrapper{} }
func (m *ProjectWrapper) String() string            { return proto.CompactTextString(m) }
func (*ProjectWrapper) ProtoMessage()               {}
func (*ProjectWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProjectWrapper) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *ProjectWrapper) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *ProjectWrapper) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *ProjectWrapper) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *ProjectWrapper) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *ProjectWrapper) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ProjectWrapper) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *ProjectWrapper) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProjectWrapper) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProjectWrapper) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

func (m *ProjectWrapper) GetStatusName() string {
	if m != nil {
		return m.StatusName
	}
	return ""
}

func (m *ProjectWrapper) GetStartDate() *dml.DateTime {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *ProjectWrapper) GetEndDate() *dml.DateTime {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *ProjectWrapper) GetTeamMembers() []*TeamMember {
	if m != nil {
		return m.TeamMembers
	}
	return nil
}

func (m *ProjectWrapper) GetChildTaskWrappers() []*TaskWrapper {
	if m != nil {
		return m.ChildTaskWrappers
	}
	return nil
}

// MService project status type
type StatusType struct {
	// status identifier
	StatusId int32 `protobuf:"varint,1,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// mservice account id
	MserviceId int64 `protobuf:"varint,7,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// status name
	StatusName string `protobuf:"bytes,8,opt,name=status_name,json=statusName" json:"status_name,omitempty"`
	// entity description
	Description string `protobuf:"bytes,9,opt,name=description" json:"description,omitempty"`
}

func (m *StatusType) Reset()                    { *m = StatusType{} }
func (m *StatusType) String() string            { return proto.CompactTextString(m) }
func (*StatusType) ProtoMessage()               {}
func (*StatusType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StatusType) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

func (m *StatusType) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *StatusType) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *StatusType) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *StatusType) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *StatusType) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *StatusType) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *StatusType) GetStatusName() string {
	if m != nil {
		return m.StatusName
	}
	return ""
}

func (m *StatusType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// MService project task
type Task struct {
	// task identifier
	TaskId int64 `protobuf:"varint,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// mservice account id
	MserviceId int64 `protobuf:"varint,7,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// project identifier
	ProjectId int64 `protobuf:"varint,8,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// entity name
	Name string `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	// entity description
	Description string `protobuf:"bytes,10,opt,name=description" json:"description,omitempty"`
	// status identifier
	StatusId int32 `protobuf:"varint,11,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
	// status name
	StatusName string `protobuf:"bytes,12,opt,name=status_name,json=statusName" json:"status_name,omitempty"`
	// project start date
	StartDate *dml.DateTime `protobuf:"bytes,13,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	// project end date
	EndDate *dml.DateTime `protobuf:"bytes,14,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	// task priority, 0 low to 9 high
	Priority int32 `protobuf:"varint,15,opt,name=priority" json:"priority,omitempty"`
	// parent task id
	ParentId int64 `protobuf:"varint,16,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	// sibling position
	Position int32 `protobuf:"varint,17,opt,name=position" json:"position,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Task) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Task) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Task) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *Task) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *Task) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *Task) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Task) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *Task) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

func (m *Task) GetStatusName() string {
	if m != nil {
		return m.StatusName
	}
	return ""
}

func (m *Task) GetStartDate() *dml.DateTime {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *Task) GetEndDate() *dml.DateTime {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *Task) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Task) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *Task) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

// MService project task with associations
type TaskWrapper struct {
	// task identifier
	TaskId int64 `protobuf:"varint,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// mservice account id
	MserviceId int64 `protobuf:"varint,7,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// project identifier
	ProjectId int64 `protobuf:"varint,8,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// entity name
	Name string `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	// entity description
	Description string `protobuf:"bytes,10,opt,name=description" json:"description,omitempty"`
	// status identifier
	StatusId int32 `protobuf:"varint,11,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
	// status name
	StatusName string `protobuf:"bytes,12,opt,name=status_name,json=statusName" json:"status_name,omitempty"`
	// project start date
	StartDate *dml.DateTime `protobuf:"bytes,13,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	// project end date
	EndDate *dml.DateTime `protobuf:"bytes,14,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	// task priority, 0 low to 9 high
	Priority int32 `protobuf:"varint,15,opt,name=priority" json:"priority,omitempty"`
	// parent task id
	ParentId int64 `protobuf:"varint,16,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	// sibling position
	Position int32 `protobuf:"varint,17,opt,name=position" json:"position,omitempty"`
	// list of project team member objects
	TeamMembers []*TeamMember `protobuf:"bytes,18,rep,name=team_members,json=teamMembers" json:"team_members,omitempty"`
	// list of child project task objects with associations
	ChildTaskWrappers []*TaskWrapper `protobuf:"bytes,19,rep,name=child_task_wrappers,json=childTaskWrappers" json:"child_task_wrappers,omitempty"`
}

func (m *TaskWrapper) Reset()                    { *m = TaskWrapper{} }
func (m *TaskWrapper) String() string            { return proto.CompactTextString(m) }
func (*TaskWrapper) ProtoMessage()               {}
func (*TaskWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TaskWrapper) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TaskWrapper) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *TaskWrapper) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *TaskWrapper) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *TaskWrapper) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *TaskWrapper) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TaskWrapper) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *TaskWrapper) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *TaskWrapper) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskWrapper) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TaskWrapper) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

func (m *TaskWrapper) GetStatusName() string {
	if m != nil {
		return m.StatusName
	}
	return ""
}

func (m *TaskWrapper) GetStartDate() *dml.DateTime {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *TaskWrapper) GetEndDate() *dml.DateTime {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *TaskWrapper) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *TaskWrapper) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *TaskWrapper) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *TaskWrapper) GetTeamMembers() []*TeamMember {
	if m != nil {
		return m.TeamMembers
	}
	return nil
}

func (m *TaskWrapper) GetChildTaskWrappers() []*TaskWrapper {
	if m != nil {
		return m.ChildTaskWrappers
	}
	return nil
}

// MService project team member
type TeamMember struct {
	// team member id
	MemberId int64 `protobuf:"varint,1,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// mservice account id
	MserviceId int64 `protobuf:"varint,7,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// project identifier
	ProjectId int64 `protobuf:"varint,8,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// entity name
	Name string `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	// role id of this team member
	ProjectRoleId int32 `protobuf:"varint,10,opt,name=project_role_id,json=projectRoleId" json:"project_role_id,omitempty"`
	// role name of this team member
	RoleName string `protobuf:"bytes,11,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
	// email address of team member
	Email string `protobuf:"bytes,12,opt,name=email" json:"email,omitempty"`
	// hours allocated to task by team member
	TaskHours *dml.Decimal `protobuf:"bytes,13,opt,name=task_hours,json=taskHours" json:"task_hours,omitempty"`
}

func (m *TeamMember) Reset()                    { *m = TeamMember{} }
func (m *TeamMember) String() string            { return proto.CompactTextString(m) }
func (*TeamMember) ProtoMessage()               {}
func (*TeamMember) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TeamMember) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *TeamMember) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *TeamMember) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *TeamMember) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *TeamMember) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *TeamMember) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TeamMember) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *TeamMember) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *TeamMember) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TeamMember) GetProjectRoleId() int32 {
	if m != nil {
		return m.ProjectRoleId
	}
	return 0
}

func (m *TeamMember) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *TeamMember) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *TeamMember) GetTaskHours() *dml.Decimal {
	if m != nil {
		return m.TaskHours
	}
	return nil
}

// MService project role type
type ProjectRoleType struct {
	// role id of this team member
	ProjectRoleId int32 `protobuf:"varint,1,opt,name=project_role_id,json=projectRoleId" json:"project_role_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// mservice account id
	MserviceId int64 `protobuf:"varint,7,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// role name of this team member
	RoleName string `protobuf:"bytes,8,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
	// entity description
	Description string `protobuf:"bytes,9,opt,name=description" json:"description,omitempty"`
}

func (m *ProjectRoleType) Reset()                    { *m = ProjectRoleType{} }
func (m *ProjectRoleType) String() string            { return proto.CompactTextString(m) }
func (*ProjectRoleType) ProtoMessage()               {}
func (*ProjectRoleType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ProjectRoleType) GetProjectRoleId() int32 {
	if m != nil {
		return m.ProjectRoleId
	}
	return 0
}

func (m *ProjectRoleType) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *ProjectRoleType) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *ProjectRoleType) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *ProjectRoleType) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *ProjectRoleType) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ProjectRoleType) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *ProjectRoleType) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *ProjectRoleType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// MService map team member to task
type TaskToMember struct {
	// project identifier
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// task identifier
	TaskId int64 `protobuf:"varint,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	// team member id
	MemberId int64 `protobuf:"varint,3,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,5,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,6,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,7,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// mservice account id
	MserviceId int64 `protobuf:"varint,8,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// hours allocated to task by team member
	TaskHours *dml.Decimal `protobuf:"bytes,9,opt,name=task_hours,json=taskHours" json:"task_hours,omitempty"`
}

func (m *TaskToMember) Reset()                    { *m = TaskToMember{} }
func (m *TaskToMember) String() string            { return proto.CompactTextString(m) }
func (*TaskToMember) ProtoMessage()               {}
func (*TaskToMember) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TaskToMember) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *TaskToMember) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TaskToMember) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *TaskToMember) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *TaskToMember) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *TaskToMember) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *TaskToMember) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *TaskToMember) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *TaskToMember) GetTaskHours() *dml.Decimal {
	if m != nil {
		return m.TaskHours
	}
	return nil
}

// request parameters for method create_project
type CreateProjectRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// entity name
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// entity description
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// status identifier
	StatusId int32 `protobuf:"varint,4,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
	// project start date
	StartDate *dml.DateTime `protobuf:"bytes,5,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	// project end date
	EndDate *dml.DateTime `protobuf:"bytes,6,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
}

func (m *CreateProjectRequest) Reset()                    { *m = CreateProjectRequest{} }
func (m *CreateProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateProjectRequest) ProtoMessage()               {}
func (*CreateProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateProjectRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *CreateProjectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateProjectRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateProjectRequest) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

func (m *CreateProjectRequest) GetStartDate() *dml.DateTime {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *CreateProjectRequest) GetEndDate() *dml.DateTime {
	if m != nil {
		return m.EndDate
	}
	return nil
}

// response parameters for method create_project
type CreateProjectResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// project identifier
	ProjectId int64 `protobuf:"varint,4,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (m *CreateProjectResponse) Reset()                    { *m = CreateProjectResponse{} }
func (m *CreateProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateProjectResponse) ProtoMessage()               {}
func (*CreateProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateProjectResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateProjectResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateProjectResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CreateProjectResponse) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

// request parameters for method update_project
type UpdateProjectRequest struct {
	// project identifier
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// mservice account id
	MserviceId int64 `protobuf:"varint,2,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// entity name
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// entity description
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	// status identifier
	StatusId int32 `protobuf:"varint,6,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
	// project start date
	StartDate *dml.DateTime `protobuf:"bytes,7,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	// project end date
	EndDate *dml.DateTime `protobuf:"bytes,8,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
}

func (m *UpdateProjectRequest) Reset()                    { *m = UpdateProjectRequest{} }
func (m *UpdateProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateProjectRequest) ProtoMessage()               {}
func (*UpdateProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateProjectRequest) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *UpdateProjectRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *UpdateProjectRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateProjectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateProjectRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateProjectRequest) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

func (m *UpdateProjectRequest) GetStartDate() *dml.DateTime {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *UpdateProjectRequest) GetEndDate() *dml.DateTime {
	if m != nil {
		return m.EndDate
	}
	return nil
}

// response parameters for method update_project
type UpdateProjectResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateProjectResponse) Reset()                    { *m = UpdateProjectResponse{} }
func (m *UpdateProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateProjectResponse) ProtoMessage()               {}
func (*UpdateProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdateProjectResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateProjectResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateProjectResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_project
type DeleteProjectRequest struct {
	// project identifier
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// mservice account id
	MserviceId int64 `protobuf:"varint,2,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteProjectRequest) Reset()                    { *m = DeleteProjectRequest{} }
func (m *DeleteProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteProjectRequest) ProtoMessage()               {}
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeleteProjectRequest) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *DeleteProjectRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *DeleteProjectRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_project
type DeleteProjectResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteProjectResponse) Reset()                    { *m = DeleteProjectResponse{} }
func (m *DeleteProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteProjectResponse) ProtoMessage()               {}
func (*DeleteProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeleteProjectResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteProjectResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteProjectResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_project_names
type GetProjectNamesRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
}

func (m *GetProjectNamesRequest) Reset()                    { *m = GetProjectNamesRequest{} }
func (m *GetProjectNamesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProjectNamesRequest) ProtoMessage()               {}
func (*GetProjectNamesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetProjectNamesRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

// response parameters for method get_project_names
type GetProjectNamesResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of entity names
	Names []string `protobuf:"bytes,3,rep,name=names" json:"names,omitempty"`
}

func (m *GetProjectNamesResponse) Reset()                    { *m = GetProjectNamesResponse{} }
func (m *GetProjectNamesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProjectNamesResponse) ProtoMessage()               {}
func (*GetProjectNamesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetProjectNamesResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetProjectNamesResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetProjectNamesResponse) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

// request parameters for method get_project_by_name
type GetProjectByNameRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// entity name
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *GetProjectByNameRequest) Reset()                    { *m = GetProjectByNameRequest{} }
func (m *GetProjectByNameRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProjectByNameRequest) ProtoMessage()               {}
func (*GetProjectByNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetProjectByNameRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetProjectByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// response parameters for method get_project_by_name
type GetProjectByNameResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// project object
	Project *Project `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
}

func (m *GetProjectByNameResponse) Reset()                    { *m = GetProjectByNameResponse{} }
func (m *GetProjectByNameResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProjectByNameResponse) ProtoMessage()               {}
func (*GetProjectByNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetProjectByNameResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetProjectByNameResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetProjectByNameResponse) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

// request parameters for method get_project_by_id
type GetProjectByIdRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// project identifier
	ProjectId int64 `protobuf:"varint,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (m *GetProjectByIdRequest) Reset()                    { *m = GetProjectByIdRequest{} }
func (m *GetProjectByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProjectByIdRequest) ProtoMessage()               {}
func (*GetProjectByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetProjectByIdRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetProjectByIdRequest) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

// response parameters for method get_project_by_id
type GetProjectByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// project object
	Project *Project `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
}

func (m *GetProjectByIdResponse) Reset()                    { *m = GetProjectByIdResponse{} }
func (m *GetProjectByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProjectByIdResponse) ProtoMessage()               {}
func (*GetProjectByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetProjectByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetProjectByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetProjectByIdResponse) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

// request parameters for method get_project_wrapper_by_name
type GetProjectWrapperByNameRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// entity name
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *GetProjectWrapperByNameRequest) Reset()                    { *m = GetProjectWrapperByNameRequest{} }
func (m *GetProjectWrapperByNameRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProjectWrapperByNameRequest) ProtoMessage()               {}
func (*GetProjectWrapperByNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetProjectWrapperByNameRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetProjectWrapperByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// response parameters for method get_project_wrapper_by_name
type GetProjectWrapperByNameResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// project object with associations
	ProjectWrapper *ProjectWrapper `protobuf:"bytes,3,opt,name=project_wrapper,json=projectWrapper" json:"project_wrapper,omitempty"`
}

func (m *GetProjectWrapperByNameResponse) Reset()         { *m = GetProjectWrapperByNameResponse{} }
func (m *GetProjectWrapperByNameResponse) String() string { return proto.CompactTextString(m) }
func (*GetProjectWrapperByNameResponse) ProtoMessage()    {}
func (*GetProjectWrapperByNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21}
}

func (m *GetProjectWrapperByNameResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetProjectWrapperByNameResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetProjectWrapperByNameResponse) GetProjectWrapper() *ProjectWrapper {
	if m != nil {
		return m.ProjectWrapper
	}
	return nil
}

// request parameters for method get_project_wrapper_by_id
type GetProjectWrapperByIdRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// project identifier
	ProjectId int64 `protobuf:"varint,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (m *GetProjectWrapperByIdRequest) Reset()                    { *m = GetProjectWrapperByIdRequest{} }
func (m *GetProjectWrapperByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProjectWrapperByIdRequest) ProtoMessage()               {}
func (*GetProjectWrapperByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetProjectWrapperByIdRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetProjectWrapperByIdRequest) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

// response parameters for method get_project_wrapper_by_id
type GetProjectWrapperByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// project object with associations
	ProjectWrapper *ProjectWrapper `protobuf:"bytes,3,opt,name=project_wrapper,json=projectWrapper" json:"project_wrapper,omitempty"`
}

func (m *GetProjectWrapperByIdResponse) Reset()                    { *m = GetProjectWrapperByIdResponse{} }
func (m *GetProjectWrapperByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProjectWrapperByIdResponse) ProtoMessage()               {}
func (*GetProjectWrapperByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetProjectWrapperByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetProjectWrapperByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetProjectWrapperByIdResponse) GetProjectWrapper() *ProjectWrapper {
	if m != nil {
		return m.ProjectWrapper
	}
	return nil
}

// request parameters for method create_status_type
type CreateStatusTypeRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// status identifier
	StatusId int32 `protobuf:"varint,2,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
	// status name
	StatusName string `protobuf:"bytes,3,opt,name=status_name,json=statusName" json:"status_name,omitempty"`
	// entity description
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

func (m *CreateStatusTypeRequest) Reset()                    { *m = CreateStatusTypeRequest{} }
func (m *CreateStatusTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateStatusTypeRequest) ProtoMessage()               {}
func (*CreateStatusTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CreateStatusTypeRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *CreateStatusTypeRequest) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

func (m *CreateStatusTypeRequest) GetStatusName() string {
	if m != nil {
		return m.StatusName
	}
	return ""
}

func (m *CreateStatusTypeRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// response parameters for method create_status_type
type CreateStatusTypeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *CreateStatusTypeResponse) Reset()                    { *m = CreateStatusTypeResponse{} }
func (m *CreateStatusTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateStatusTypeResponse) ProtoMessage()               {}
func (*CreateStatusTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CreateStatusTypeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateStatusTypeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateStatusTypeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method update_status_type
type UpdateStatusTypeRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// status identifier
	StatusId int32 `protobuf:"varint,2,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// status name
	StatusName string `protobuf:"bytes,4,opt,name=status_name,json=statusName" json:"status_name,omitempty"`
	// entity description
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
}

func (m *UpdateStatusTypeRequest) Reset()                    { *m = UpdateStatusTypeRequest{} }
func (m *UpdateStatusTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateStatusTypeRequest) ProtoMessage()               {}
func (*UpdateStatusTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *UpdateStatusTypeRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *UpdateStatusTypeRequest) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

func (m *UpdateStatusTypeRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateStatusTypeRequest) GetStatusName() string {
	if m != nil {
		return m.StatusName
	}
	return ""
}

func (m *UpdateStatusTypeRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// response parameters for method update_status_type
type UpdateStatusTypeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateStatusTypeResponse) Reset()                    { *m = UpdateStatusTypeResponse{} }
func (m *UpdateStatusTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateStatusTypeResponse) ProtoMessage()               {}
func (*UpdateStatusTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *UpdateStatusTypeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateStatusTypeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateStatusTypeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_status_type
type DeleteStatusTypeRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// status identifier
	StatusId int32 `protobuf:"varint,2,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteStatusTypeRequest) Reset()                    { *m = DeleteStatusTypeRequest{} }
func (m *DeleteStatusTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteStatusTypeRequest) ProtoMessage()               {}
func (*DeleteStatusTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *DeleteStatusTypeRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *DeleteStatusTypeRequest) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

func (m *DeleteStatusTypeRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_status_type
type DeleteStatusTypeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteStatusTypeResponse) Reset()                    { *m = DeleteStatusTypeResponse{} }
func (m *DeleteStatusTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteStatusTypeResponse) ProtoMessage()               {}
func (*DeleteStatusTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *DeleteStatusTypeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteStatusTypeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteStatusTypeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_status_type
type GetStatusTypeRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// status identifier
	StatusId int32 `protobuf:"varint,2,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
}

func (m *GetStatusTypeRequest) Reset()                    { *m = GetStatusTypeRequest{} }
func (m *GetStatusTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStatusTypeRequest) ProtoMessage()               {}
func (*GetStatusTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetStatusTypeRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetStatusTypeRequest) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

// response parameters for method get_status_type
type GetStatusTypeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// status type object
	StatusType *StatusType `protobuf:"bytes,3,opt,name=status_type,json=statusType" json:"status_type,omitempty"`
}

func (m *GetStatusTypeResponse) Reset()                    { *m = GetStatusTypeResponse{} }
func (m *GetStatusTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetStatusTypeResponse) ProtoMessage()               {}
func (*GetStatusTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetStatusTypeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetStatusTypeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetStatusTypeResponse) GetStatusType() *StatusType {
	if m != nil {
		return m.StatusType
	}
	return nil
}

// request parameters for method get_status_types
type GetStatusTypesRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
}

func (m *GetStatusTypesRequest) Reset()                    { *m = GetStatusTypesRequest{} }
func (m *GetStatusTypesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStatusTypesRequest) ProtoMessage()               {}
func (*GetStatusTypesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GetStatusTypesRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

// response parameters for method get_status_types
type GetStatusTypesResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of status type objects
	StatusTypes []*StatusType `protobuf:"bytes,3,rep,name=status_types,json=statusTypes" json:"status_types,omitempty"`
}

func (m *GetStatusTypesResponse) Reset()                    { *m = GetStatusTypesResponse{} }
func (m *GetStatusTypesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetStatusTypesResponse) ProtoMessage()               {}
func (*GetStatusTypesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *GetStatusTypesResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetStatusTypesResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetStatusTypesResponse) GetStatusTypes() []*StatusType {
	if m != nil {
		return m.StatusTypes
	}
	return nil
}

// request parameters for method create_task
type CreateTaskRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// project identifier
	ProjectId int64 `protobuf:"varint,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// entity name
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// entity description
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// status identifier
	StatusId int32 `protobuf:"varint,5,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
	// project start date
	StartDate *dml.DateTime `protobuf:"bytes,6,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	// project end date
	EndDate *dml.DateTime `protobuf:"bytes,7,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	// task priority, 0 low to 9 high
	Priority int32 `protobuf:"varint,8,opt,name=priority" json:"priority,omitempty"`
	// parent task id
	ParentId int64 `protobuf:"varint,9,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	// sibling position
	Position int32 `protobuf:"varint,10,opt,name=position" json:"position,omitempty"`
}

func (m *CreateTaskRequest) Reset()                    { *m = CreateTaskRequest{} }
func (m *CreateTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTaskRequest) ProtoMessage()               {}
func (*CreateTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *CreateTaskRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *CreateTaskRequest) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *CreateTaskRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTaskRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateTaskRequest) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

func (m *CreateTaskRequest) GetStartDate() *dml.DateTime {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *CreateTaskRequest) GetEndDate() *dml.DateTime {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *CreateTaskRequest) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *CreateTaskRequest) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *CreateTaskRequest) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

// response parameters for method create_task
type CreateTaskResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// task identifier
	TaskId int64 `protobuf:"varint,4,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
}

func (m *CreateTaskResponse) Reset()                    { *m = CreateTaskResponse{} }
func (m *CreateTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTaskResponse) ProtoMessage()               {}
func (*CreateTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *CreateTaskResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateTaskResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateTaskResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CreateTaskResponse) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

// request parameters for method update_task
type UpdateTaskRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// task identifier
	TaskId int64 `protobuf:"varint,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// entity name
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// entity description
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	// status identifier
	StatusId int32 `protobuf:"varint,6,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
	// project start date
	StartDate *dml.DateTime `protobuf:"bytes,7,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	// project end date
	EndDate *dml.DateTime `protobuf:"bytes,8,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	// task priority, 0 low to 9 high
	Priority int32 `protobuf:"varint,9,opt,name=priority" json:"priority,omitempty"`
	// parent task id
	ParentId int64 `protobuf:"varint,10,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	// sibling position
	Position int32 `protobuf:"varint,11,opt,name=position" json:"position,omitempty"`
}

func (m *UpdateTaskRequest) Reset()                    { *m = UpdateTaskRequest{} }
func (m *UpdateTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTaskRequest) ProtoMessage()               {}
func (*UpdateTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *UpdateTaskRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *UpdateTaskRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *UpdateTaskRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateTaskRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateTaskRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateTaskRequest) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

func (m *UpdateTaskRequest) GetStartDate() *dml.DateTime {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *UpdateTaskRequest) GetEndDate() *dml.DateTime {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *UpdateTaskRequest) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *UpdateTaskRequest) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *UpdateTaskRequest) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

// response parameters for method update_task
type UpdateTaskResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateTaskResponse) Reset()                    { *m = UpdateTaskResponse{} }
func (m *UpdateTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateTaskResponse) ProtoMessage()               {}
func (*UpdateTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *UpdateTaskResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateTaskResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateTaskResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_task
type DeleteTaskRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// task identifier
	TaskId int64 `protobuf:"varint,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteTaskRequest) Reset()                    { *m = DeleteTaskRequest{} }
func (m *DeleteTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTaskRequest) ProtoMessage()               {}
func (*DeleteTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *DeleteTaskRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *DeleteTaskRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *DeleteTaskRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_task
type DeleteTaskResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteTaskResponse) Reset()                    { *m = DeleteTaskResponse{} }
func (m *DeleteTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteTaskResponse) ProtoMessage()               {}
func (*DeleteTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *DeleteTaskResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteTaskResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteTaskResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_task_by_id
type GetTaskByIdRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// task identifier
	TaskId int64 `protobuf:"varint,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
}

func (m *GetTaskByIdRequest) Reset()                    { *m = GetTaskByIdRequest{} }
func (m *GetTaskByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTaskByIdRequest) ProtoMessage()               {}
func (*GetTaskByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *GetTaskByIdRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetTaskByIdRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

// response parameters for method get_task_by_id
type GetTaskByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// project task object
	Task *Task `protobuf:"bytes,3,opt,name=task" json:"task,omitempty"`
}

func (m *GetTaskByIdResponse) Reset()                    { *m = GetTaskByIdResponse{} }
func (m *GetTaskByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTaskByIdResponse) ProtoMessage()               {}
func (*GetTaskByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *GetTaskByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetTaskByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetTaskByIdResponse) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

// request parameters for method get_task_wrapper_by_id
type GetTaskWrapperByIdRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// task identifier
	TaskId int64 `protobuf:"varint,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
}

func (m *GetTaskWrapperByIdRequest) Reset()                    { *m = GetTaskWrapperByIdRequest{} }
func (m *GetTaskWrapperByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTaskWrapperByIdRequest) ProtoMessage()               {}
func (*GetTaskWrapperByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *GetTaskWrapperByIdRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetTaskWrapperByIdRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

// response parameters for method get_task_wrapper_by_id
type GetTaskWrapperByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// project task object with associations
	TaskWrapper *TaskWrapper `protobuf:"bytes,3,opt,name=task_wrapper,json=taskWrapper" json:"task_wrapper,omitempty"`
}

func (m *GetTaskWrapperByIdResponse) Reset()                    { *m = GetTaskWrapperByIdResponse{} }
func (m *GetTaskWrapperByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTaskWrapperByIdResponse) ProtoMessage()               {}
func (*GetTaskWrapperByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *GetTaskWrapperByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetTaskWrapperByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetTaskWrapperByIdResponse) GetTaskWrapper() *TaskWrapper {
	if m != nil {
		return m.TaskWrapper
	}
	return nil
}

// request parameters for method reorder_child_tasks
type ReorderChildTasksRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// task identifier
	TaskId int64 `protobuf:"varint,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// list of child task identifiers
	ChildTaskIds []int64 `protobuf:"varint,4,rep,packed,name=child_task_ids,json=childTaskIds" json:"child_task_ids,omitempty"`
}

func (m *ReorderChildTasksRequest) Reset()                    { *m = ReorderChildTasksRequest{} }
func (m *ReorderChildTasksRequest) String() string            { return proto.CompactTextString(m) }
func (*ReorderChildTasksRequest) ProtoMessage()               {}
func (*ReorderChildTasksRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ReorderChildTasksRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *ReorderChildTasksRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *ReorderChildTasksRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ReorderChildTasksRequest) GetChildTaskIds() []int64 {
	if m != nil {
		return m.ChildTaskIds
	}
	return nil
}

// response parameters for method reorder_child_tasks
type ReorderChildTasksResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *ReorderChildTasksResponse) Reset()                    { *m = ReorderChildTasksResponse{} }
func (m *ReorderChildTasksResponse) String() string            { return proto.CompactTextString(m) }
func (*ReorderChildTasksResponse) ProtoMessage()               {}
func (*ReorderChildTasksResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *ReorderChildTasksResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ReorderChildTasksResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *ReorderChildTasksResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_tasks_by_project
type GetTasksByProjectRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// project identifier
	ProjectId int64 `protobuf:"varint,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (m *GetTasksByProjectRequest) Reset()                    { *m = GetTasksByProjectRequest{} }
func (m *GetTasksByProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTasksByProjectRequest) ProtoMessage()               {}
func (*GetTasksByProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *GetTasksByProjectRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetTasksByProjectRequest) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

// response parameters for method get_tasks_by_project
type GetTasksByProjectResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of project task objects
	Tasks []*Task `protobuf:"bytes,3,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *GetTasksByProjectResponse) Reset()                    { *m = GetTasksByProjectResponse{} }
func (m *GetTasksByProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTasksByProjectResponse) ProtoMessage()               {}
func (*GetTasksByProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *GetTasksByProjectResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetTasksByProjectResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetTasksByProjectResponse) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// request parameters for method create_team_member
type CreateTeamMemberRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// project identifier
	ProjectId int64 `protobuf:"varint,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// entity name
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// role id of this team member
	ProjectRoleId int32 `protobuf:"varint,4,opt,name=project_role_id,json=projectRoleId" json:"project_role_id,omitempty"`
	// email address of team member
	Email string `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
}

func (m *CreateTeamMemberRequest) Reset()                    { *m = CreateTeamMemberRequest{} }
func (m *CreateTeamMemberRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTeamMemberRequest) ProtoMessage()               {}
func (*CreateTeamMemberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *CreateTeamMemberRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *CreateTeamMemberRequest) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *CreateTeamMemberRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTeamMemberRequest) GetProjectRoleId() int32 {
	if m != nil {
		return m.ProjectRoleId
	}
	return 0
}

func (m *CreateTeamMemberRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// response parameters for method create_team_member
type CreateTeamMemberResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// team member id
	MemberId int64 `protobuf:"varint,4,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
}

func (m *CreateTeamMemberResponse) Reset()                    { *m = CreateTeamMemberResponse{} }
func (m *CreateTeamMemberResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTeamMemberResponse) ProtoMessage()               {}
func (*CreateTeamMemberResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *CreateTeamMemberResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateTeamMemberResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateTeamMemberResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CreateTeamMemberResponse) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

// request parameters for method update_team_member
type UpdateTeamMemberRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// team member id
	MemberId int64 `protobuf:"varint,2,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// entity name
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// role id of this team member
	ProjectRoleId int32 `protobuf:"varint,5,opt,name=project_role_id,json=projectRoleId" json:"project_role_id,omitempty"`
	// email address of team member
	Email string `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
}

func (m *UpdateTeamMemberRequest) Reset()                    { *m = UpdateTeamMemberRequest{} }
func (m *UpdateTeamMemberRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTeamMemberRequest) ProtoMessage()               {}
func (*UpdateTeamMemberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *UpdateTeamMemberRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *UpdateTeamMemberRequest) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *UpdateTeamMemberRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateTeamMemberRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateTeamMemberRequest) GetProjectRoleId() int32 {
	if m != nil {
		return m.ProjectRoleId
	}
	return 0
}

func (m *UpdateTeamMemberRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// response parameters for method update_team_member
type UpdateTeamMemberResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateTeamMemberResponse) Reset()                    { *m = UpdateTeamMemberResponse{} }
func (m *UpdateTeamMemberResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateTeamMemberResponse) ProtoMessage()               {}
func (*UpdateTeamMemberResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *UpdateTeamMemberResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateTeamMemberResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateTeamMemberResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_team_member
type DeleteTeamMemberRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// team member id
	MemberId int64 `protobuf:"varint,2,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteTeamMemberRequest) Reset()                    { *m = DeleteTeamMemberRequest{} }
func (m *DeleteTeamMemberRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTeamMemberRequest) ProtoMessage()               {}
func (*DeleteTeamMemberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *DeleteTeamMemberRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *DeleteTeamMemberRequest) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *DeleteTeamMemberRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_team_member
type DeleteTeamMemberResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteTeamMemberResponse) Reset()                    { *m = DeleteTeamMemberResponse{} }
func (m *DeleteTeamMemberResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteTeamMemberResponse) ProtoMessage()               {}
func (*DeleteTeamMemberResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *DeleteTeamMemberResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteTeamMemberResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteTeamMemberResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_team_member_by_id
type GetTeamMemberByIdRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// team member id
	MemberId int64 `protobuf:"varint,2,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
}

func (m *GetTeamMemberByIdRequest) Reset()                    { *m = GetTeamMemberByIdRequest{} }
func (m *GetTeamMemberByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTeamMemberByIdRequest) ProtoMessage()               {}
func (*GetTeamMemberByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *GetTeamMemberByIdRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetTeamMemberByIdRequest) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

// response parameters for method get_team_member_by_id
type GetTeamMemberByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// project team member object
	TeamMember *TeamMember `protobuf:"bytes,3,opt,name=team_member,json=teamMember" json:"team_member,omitempty"`
}

func (m *GetTeamMemberByIdResponse) Reset()                    { *m = GetTeamMemberByIdResponse{} }
func (m *GetTeamMemberByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTeamMemberByIdResponse) ProtoMessage()               {}
func (*GetTeamMemberByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *GetTeamMemberByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetTeamMemberByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetTeamMemberByIdResponse) GetTeamMember() *TeamMember {
	if m != nil {
		return m.TeamMember
	}
	return nil
}

// request parameters for method get_team_member_by_project
type GetTeamMemberByProjectRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// project identifier
	ProjectId int64 `protobuf:"varint,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (m *GetTeamMemberByProjectRequest) Reset()                    { *m = GetTeamMemberByProjectRequest{} }
func (m *GetTeamMemberByProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTeamMemberByProjectRequest) ProtoMessage()               {}
func (*GetTeamMemberByProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *GetTeamMemberByProjectRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetTeamMemberByProjectRequest) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

// response parameters for method get_team_member_by_project
type GetTeamMemberByProjectResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of project team member objects
	TeamMembers []*TeamMember `protobuf:"bytes,3,rep,name=team_members,json=teamMembers" json:"team_members,omitempty"`
}

func (m *GetTeamMemberByProjectResponse) Reset()                    { *m = GetTeamMemberByProjectResponse{} }
func (m *GetTeamMemberByProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTeamMemberByProjectResponse) ProtoMessage()               {}
func (*GetTeamMemberByProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *GetTeamMemberByProjectResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetTeamMemberByProjectResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetTeamMemberByProjectResponse) GetTeamMembers() []*TeamMember {
	if m != nil {
		return m.TeamMembers
	}
	return nil
}

// request parameters for method get_team_member_by_task
type GetTeamMemberByTaskRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// task identifier
	TaskId int64 `protobuf:"varint,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
}

func (m *GetTeamMemberByTaskRequest) Reset()                    { *m = GetTeamMemberByTaskRequest{} }
func (m *GetTeamMemberByTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTeamMemberByTaskRequest) ProtoMessage()               {}
func (*GetTeamMemberByTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *GetTeamMemberByTaskRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetTeamMemberByTaskRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

// response parameters for method get_team_member_by_task
type GetTeamMemberByTaskResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of project team member objects
	TeamMembers []*TeamMember `protobuf:"bytes,3,rep,name=team_members,json=teamMembers" json:"team_members,omitempty"`
}

func (m *GetTeamMemberByTaskResponse) Reset()                    { *m = GetTeamMemberByTaskResponse{} }
func (m *GetTeamMemberByTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTeamMemberByTaskResponse) ProtoMessage()               {}
func (*GetTeamMemberByTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *GetTeamMemberByTaskResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetTeamMemberByTaskResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetTeamMemberByTaskResponse) GetTeamMembers() []*TeamMember {
	if m != nil {
		return m.TeamMembers
	}
	return nil
}

// request parameters for method add_team_member_to_task
type AddTeamMemberToTaskRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// task identifier
	TaskId int64 `protobuf:"varint,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	// team member id
	MemberId int64 `protobuf:"varint,3,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
}

func (m *AddTeamMemberToTaskRequest) Reset()                    { *m = AddTeamMemberToTaskRequest{} }
func (m *AddTeamMemberToTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTeamMemberToTaskRequest) ProtoMessage()               {}
func (*AddTeamMemberToTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *AddTeamMemberToTaskRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *AddTeamMemberToTaskRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *AddTeamMemberToTaskRequest) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

// response parameters for method add_team_member_to_task
type AddTeamMemberToTaskResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (m *AddTeamMemberToTaskResponse) Reset()                    { *m = AddTeamMemberToTaskResponse{} }
func (m *AddTeamMemberToTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*AddTeamMemberToTaskResponse) ProtoMessage()               {}
func (*AddTeamMemberToTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *AddTeamMemberToTaskResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *AddTeamMemberToTaskResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// request parameters for method remove_team_member_from_task
type RemoveTeamMemberFromTaskRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// task identifier
	TaskId int64 `protobuf:"varint,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	// team member id
	MemberId int64 `protobuf:"varint,3,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
}

func (m *RemoveTeamMemberFromTaskRequest) Reset()         { *m = RemoveTeamMemberFromTaskRequest{} }
func (m *RemoveTeamMemberFromTaskRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveTeamMemberFromTaskRequest) ProtoMessage()    {}
func (*RemoveTeamMemberFromTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{62}
}

func (m *RemoveTeamMemberFromTaskRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *RemoveTeamMemberFromTaskRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *RemoveTeamMemberFromTaskRequest) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

// response parameters for method remove_team_member_from_task
type RemoveTeamMemberFromTaskResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (m *RemoveTeamMemberFromTaskResponse) Reset()         { *m = RemoveTeamMemberFromTaskResponse{} }
func (m *RemoveTeamMemberFromTaskResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveTeamMemberFromTaskResponse) ProtoMessage()    {}
func (*RemoveTeamMemberFromTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{63}
}

func (m *RemoveTeamMemberFromTaskResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *RemoveTeamMemberFromTaskResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// request parameters for method add_task_hours
type AddTaskHoursRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// task identifier
	TaskId int64 `protobuf:"varint,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	// team member id
	MemberId int64 `protobuf:"varint,3,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	// hours allocated to task by team member
	TaskHours *dml.Decimal `protobuf:"bytes,4,opt,name=task_hours,json=taskHours" json:"task_hours,omitempty"`
}

func (m *AddTaskHoursRequest) Reset()                    { *m = AddTaskHoursRequest{} }
func (m *AddTaskHoursRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTaskHoursRequest) ProtoMessage()               {}
func (*AddTaskHoursRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *AddTaskHoursRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *AddTaskHoursRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *AddTaskHoursRequest) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *AddTaskHoursRequest) GetTaskHours() *dml.Decimal {
	if m != nil {
		return m.TaskHours
	}
	return nil
}

// response parameters for method add_task_hours
type AddTaskHoursResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// hours allocated to task by team member
	TaskHours *dml.Decimal `protobuf:"bytes,3,opt,name=task_hours,json=taskHours" json:"task_hours,omitempty"`
}

func (m *AddTaskHoursResponse) Reset()                    { *m = AddTaskHoursResponse{} }
func (m *AddTaskHoursResponse) String() string            { return proto.CompactTextString(m) }
func (*AddTaskHoursResponse) ProtoMessage()               {}
func (*AddTaskHoursResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *AddTaskHoursResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *AddTaskHoursResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *AddTaskHoursResponse) GetTaskHours() *dml.Decimal {
	if m != nil {
		return m.TaskHours
	}
	return nil
}

// request parameters for method create_project_role_type
type CreateProjectRoleTypeRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// role id of this team member
	ProjectRoleId int32 `protobuf:"varint,2,opt,name=project_role_id,json=projectRoleId" json:"project_role_id,omitempty"`
	// role name of this team member
	RoleName string `protobuf:"bytes,3,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
	// entity description
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

func (m *CreateProjectRoleTypeRequest) Reset()                    { *m = CreateProjectRoleTypeRequest{} }
func (m *CreateProjectRoleTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateProjectRoleTypeRequest) ProtoMessage()               {}
func (*CreateProjectRoleTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *CreateProjectRoleTypeRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *CreateProjectRoleTypeRequest) GetProjectRoleId() int32 {
	if m != nil {
		return m.ProjectRoleId
	}
	return 0
}

func (m *CreateProjectRoleTypeRequest) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *CreateProjectRoleTypeRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// response parameters for method create_project_role_type
type CreateProjectRoleTypeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *CreateProjectRoleTypeResponse) Reset()                    { *m = CreateProjectRoleTypeResponse{} }
func (m *CreateProjectRoleTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateProjectRoleTypeResponse) ProtoMessage()               {}
func (*CreateProjectRoleTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *CreateProjectRoleTypeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateProjectRoleTypeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateProjectRoleTypeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method update_project_role_type
type UpdateProjectRoleTypeRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// role id of this team member
	ProjectRoleId int32 `protobuf:"varint,2,opt,name=project_role_id,json=projectRoleId" json:"project_role_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// role name of this team member
	RoleName string `protobuf:"bytes,4,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
	// entity description
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
}

func (m *UpdateProjectRoleTypeRequest) Reset()                    { *m = UpdateProjectRoleTypeRequest{} }
func (m *UpdateProjectRoleTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateProjectRoleTypeRequest) ProtoMessage()               {}
func (*UpdateProjectRoleTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *UpdateProjectRoleTypeRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *UpdateProjectRoleTypeRequest) GetProjectRoleId() int32 {
	if m != nil {
		return m.ProjectRoleId
	}
	return 0
}

func (m *UpdateProjectRoleTypeRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateProjectRoleTypeRequest) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *UpdateProjectRoleTypeRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// response parameters for method update_project_role_type
type UpdateProjectRoleTypeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateProjectRoleTypeResponse) Reset()                    { *m = UpdateProjectRoleTypeResponse{} }
func (m *UpdateProjectRoleTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateProjectRoleTypeResponse) ProtoMessage()               {}
func (*UpdateProjectRoleTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *UpdateProjectRoleTypeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateProjectRoleTypeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateProjectRoleTypeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_project_role_type
type DeleteProjectRoleTypeRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// role id of this team member
	ProjectRoleId int32 `protobuf:"varint,2,opt,name=project_role_id,json=projectRoleId" json:"project_role_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteProjectRoleTypeRequest) Reset()                    { *m = DeleteProjectRoleTypeRequest{} }
func (m *DeleteProjectRoleTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteProjectRoleTypeRequest) ProtoMessage()               {}
func (*DeleteProjectRoleTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *DeleteProjectRoleTypeRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *DeleteProjectRoleTypeRequest) GetProjectRoleId() int32 {
	if m != nil {
		return m.ProjectRoleId
	}
	return 0
}

func (m *DeleteProjectRoleTypeRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_project_role_type
type DeleteProjectRoleTypeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteProjectRoleTypeResponse) Reset()                    { *m = DeleteProjectRoleTypeResponse{} }
func (m *DeleteProjectRoleTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteProjectRoleTypeResponse) ProtoMessage()               {}
func (*DeleteProjectRoleTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *DeleteProjectRoleTypeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteProjectRoleTypeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteProjectRoleTypeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_project_role_type
type GetProjectRoleTypeRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// role id of this team member
	ProjectRoleId int32 `protobuf:"varint,2,opt,name=project_role_id,json=projectRoleId" json:"project_role_id,omitempty"`
}

func (m *GetProjectRoleTypeRequest) Reset()                    { *m = GetProjectRoleTypeRequest{} }
func (m *GetProjectRoleTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProjectRoleTypeRequest) ProtoMessage()               {}
func (*GetProjectRoleTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *GetProjectRoleTypeRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetProjectRoleTypeRequest) GetProjectRoleId() int32 {
	if m != nil {
		return m.ProjectRoleId
	}
	return 0
}

// response parameters for method get_project_role_type
type GetProjectRoleTypeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// project role type object
	RoleType *ProjectRoleType `protobuf:"bytes,3,opt,name=role_type,json=roleType" json:"role_type,omitempty"`
}

func (m *GetProjectRoleTypeResponse) Reset()                    { *m = GetProjectRoleTypeResponse{} }
func (m *GetProjectRoleTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProjectRoleTypeResponse) ProtoMessage()               {}
func (*GetProjectRoleTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *GetProjectRoleTypeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetProjectRoleTypeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetProjectRoleTypeResponse) GetRoleType() *ProjectRoleType {
	if m != nil {
		return m.RoleType
	}
	return nil
}

// request parameters for method get_project_role_types
type GetProjectRoleTypesRequest struct {
	// mservice account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
}

func (m *GetProjectRoleTypesRequest) Reset()                    { *m = GetProjectRoleTypesRequest{} }
func (m *GetProjectRoleTypesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProjectRoleTypesRequest) ProtoMessage()               {}
func (*GetProjectRoleTypesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *GetProjectRoleTypesRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

// response parameters for method get_project_role_types
type GetProjectRoleTypesResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of project role type objects
	RoleTypes []*ProjectRoleType `protobuf:"bytes,3,rep,name=role_types,json=roleTypes" json:"role_types,omitempty"`
}

func (m *GetProjectRoleTypesResponse) Reset()                    { *m = GetProjectRoleTypesResponse{} }
func (m *GetProjectRoleTypesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProjectRoleTypesResponse) ProtoMessage()               {}
func (*GetProjectRoleTypesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *GetProjectRoleTypesResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetProjectRoleTypesResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetProjectRoleTypesResponse) GetRoleTypes() []*ProjectRoleType {
	if m != nil {
		return m.RoleTypes
	}
	return nil
}

// request parameters for method get_server_version
type GetServerVersionRequest struct {
	// placeholder param to avoid empty message
	DummyParam int32 `protobuf:"varint,1,opt,name=dummy_param,json=dummyParam" json:"dummy_param,omitempty"`
}

func (m *GetServerVersionRequest) Reset()                    { *m = GetServerVersionRequest{} }
func (m *GetServerVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServerVersionRequest) ProtoMessage()               {}
func (*GetServerVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *GetServerVersionRequest) GetDummyParam() int32 {
	if m != nil {
		return m.DummyParam
	}
	return 0
}

// response parameters for method get_server_version
type GetServerVersionResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version level of server
	ServerVersion string `protobuf:"bytes,3,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	// server uptime in seconds
	ServerUptime int64 `protobuf:"varint,4,opt,name=server_uptime,json=serverUptime" json:"server_uptime,omitempty"`
}

func (m *GetServerVersionResponse) Reset()                    { *m = GetServerVersionResponse{} }
func (m *GetServerVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetServerVersionResponse) ProtoMessage()               {}
func (*GetServerVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *GetServerVersionResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetServerVersionResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetServerVersionResponse) GetServerVersion() string {
	if m != nil {
		return m.ServerVersion
	}
	return ""
}

func (m *GetServerVersionResponse) GetServerUptime() int64 {
	if m != nil {
		return m.ServerUptime
	}
	return 0
}

func init() {
	proto.RegisterType((*Project)(nil), "org.gaterace.mservice.project.Project")
	proto.RegisterType((*ProjectWrapper)(nil), "org.gaterace.mservice.project.ProjectWrapper")
	proto.RegisterType((*StatusType)(nil), "org.gaterace.mservice.project.StatusType")
	proto.RegisterType((*Task)(nil), "org.gaterace.mservice.project.Task")
	proto.RegisterType((*TaskWrapper)(nil), "org.gaterace.mservice.project.TaskWrapper")
	proto.RegisterType((*TeamMember)(nil), "org.gaterace.mservice.project.TeamMember")
	proto.RegisterType((*ProjectRoleType)(nil), "org.gaterace.mservice.project.ProjectRoleType")
	proto.RegisterType((*TaskToMember)(nil), "org.gaterace.mservice.project.TaskToMember")
	proto.RegisterType((*CreateProjectRequest)(nil), "org.gaterace.mservice.project.CreateProjectRequest")
	proto.RegisterType((*CreateProjectResponse)(nil), "org.gaterace.mservice.project.CreateProjectResponse")
	proto.RegisterType((*UpdateProjectRequest)(nil), "org.gaterace.mservice.project.UpdateProjectRequest")
	proto.RegisterType((*UpdateProjectResponse)(nil), "org.gaterace.mservice.project.UpdateProjectResponse")
	proto.RegisterType((*DeleteProjectRequest)(nil), "org.gaterace.mservice.project.DeleteProjectRequest")
	proto.RegisterType((*DeleteProjectResponse)(nil), "org.gaterace.mservice.project.DeleteProjectResponse")
	proto.RegisterType((*GetProjectNamesRequest)(nil), "org.gaterace.mservice.project.GetProjectNamesRequest")
	proto.RegisterType((*GetProjectNamesResponse)(nil), "org.gaterace.mservice.project.GetProjectNamesResponse")
	proto.RegisterType((*GetProjectByNameRequest)(nil), "org.gaterace.mservice.project.GetProjectByNameRequest")
	proto.RegisterType((*GetProjectByNameResponse)(nil), "org.gaterace.mservice.project.GetProjectByNameResponse")
	proto.RegisterType((*GetProjectByIdRequest)(nil), "org.gaterace.mservice.project.GetProjectByIdRequest")
	proto.RegisterType((*GetProjectByIdResponse)(nil), "org.gaterace.mservice.project.GetProjectByIdResponse")
	proto.RegisterType((*GetProjectWrapperByNameRequest)(nil), "org.gaterace.mservice.project.GetProjectWrapperByNameRequest")
	proto.RegisterType((*GetProjectWrapperByNameResponse)(nil), "org.gaterace.mservice.project.GetProjectWrapperByNameResponse")
	proto.RegisterType((*GetProjectWrapperByIdRequest)(nil), "org.gaterace.mservice.project.GetProjectWrapperByIdRequest")
	proto.RegisterType((*GetProjectWrapperByIdResponse)(nil), "org.gaterace.mservice.project.GetProjectWrapperByIdResponse")
	proto.RegisterType((*CreateStatusTypeRequest)(nil), "org.gaterace.mservice.project.CreateStatusTypeRequest")
	proto.RegisterType((*CreateStatusTypeResponse)(nil), "org.gaterace.mservice.project.CreateStatusTypeResponse")
	proto.RegisterType((*UpdateStatusTypeRequest)(nil), "org.gaterace.mservice.project.UpdateStatusTypeRequest")
	proto.RegisterType((*UpdateStatusTypeResponse)(nil), "org.gaterace.mservice.project.UpdateStatusTypeResponse")
	proto.RegisterType((*DeleteStatusTypeRequest)(nil), "org.gaterace.mservice.project.DeleteStatusTypeRequest")
	proto.RegisterType((*DeleteStatusTypeResponse)(nil), "org.gaterace.mservice.project.DeleteStatusTypeResponse")
	proto.RegisterType((*GetStatusTypeRequest)(nil), "org.gaterace.mservice.project.GetStatusTypeRequest")
	proto.RegisterType((*GetStatusTypeResponse)(nil), "org.gaterace.mservice.project.GetStatusTypeResponse")
	proto.RegisterType((*GetStatusTypesRequest)(nil), "org.gaterace.mservice.project.GetStatusTypesRequest")
	proto.RegisterType((*GetStatusTypesResponse)(nil), "org.gaterace.mservice.project.GetStatusTypesResponse")
	proto.RegisterType((*CreateTaskRequest)(nil), "org.gaterace.mservice.project.CreateTaskRequest")
	proto.RegisterType((*CreateTaskResponse)(nil), "org.gaterace.mservice.project.CreateTaskResponse")
	proto.RegisterType((*UpdateTaskRequest)(nil), "org.gaterace.mservice.project.UpdateTaskRequest")
	proto.RegisterType((*UpdateTaskResponse)(nil), "org.gaterace.mservice.project.UpdateTaskResponse")
	proto.RegisterType((*DeleteTaskRequest)(nil), "org.gaterace.mservice.project.DeleteTaskRequest")
	proto.RegisterType((*DeleteTaskResponse)(nil), "org.gaterace.mservice.project.DeleteTaskResponse")
	proto.RegisterType((*GetTaskByIdRequest)(nil), "org.gaterace.mservice.project.GetTaskByIdRequest")
	proto.RegisterType((*GetTaskByIdResponse)(nil), "org.gaterace.mservice.project.GetTaskByIdResponse")
	proto.RegisterType((*GetTaskWrapperByIdRequest)(nil), "org.gaterace.mservice.project.GetTaskWrapperByIdRequest")
	proto.RegisterType((*GetTaskWrapperByIdResponse)(nil), "org.gaterace.mservice.project.GetTaskWrapperByIdResponse")
	proto.RegisterType((*ReorderChildTasksRequest)(nil), "org.gaterace.mservice.project.ReorderChildTasksRequest")
	proto.RegisterType((*ReorderChildTasksResponse)(nil), "org.gaterace.mservice.project.ReorderChildTasksResponse")
	proto.RegisterType((*GetTasksByProjectRequest)(nil), "org.gaterace.mservice.project.GetTasksByProjectRequest")
	proto.RegisterType((*GetTasksByProjectResponse)(nil), "org.gaterace.mservice.project.GetTasksByProjectResponse")
	proto.RegisterType((*CreateTeamMemberRequest)(nil), "org.gaterace.mservice.project.CreateTeamMemberRequest")
	proto.RegisterType((*CreateTeamMemberResponse)(nil), "org.gaterace.mservice.project.CreateTeamMemberResponse")
	proto.RegisterType((*UpdateTeamMemberRequest)(nil), "org.gaterace.mservice.project.UpdateTeamMemberRequest")
	proto.RegisterType((*UpdateTeamMemberResponse)(nil), "org.gaterace.mservice.project.UpdateTeamMemberResponse")
	proto.RegisterType((*DeleteTeamMemberRequest)(nil), "org.gaterace.mservice.project.DeleteTeamMemberRequest")
	proto.RegisterType((*DeleteTeamMemberResponse)(nil), "org.gaterace.mservice.project.DeleteTeamMemberResponse")
	proto.RegisterType((*GetTeamMemberByIdRequest)(nil), "org.gaterace.mservice.project.GetTeamMemberByIdRequest")
	proto.RegisterType((*GetTeamMemberByIdResponse)(nil), "org.gaterace.mservice.project.GetTeamMemberByIdResponse")
	proto.RegisterType((*GetTeamMemberByProjectRequest)(nil), "org.gaterace.mservice.project.GetTeamMemberByProjectRequest")
	proto.RegisterType((*GetTeamMemberByProjectResponse)(nil), "org.gaterace.mservice.project.GetTeamMemberByProjectResponse")
	proto.RegisterType((*GetTeamMemberByTaskRequest)(nil), "org.gaterace.mservice.project.GetTeamMemberByTaskRequest")
	proto.RegisterType((*GetTeamMemberByTaskResponse)(nil), "org.gaterace.mservice.project.GetTeamMemberByTaskResponse")
	proto.RegisterType((*AddTeamMemberToTaskRequest)(nil), "org.gaterace.mservice.project.AddTeamMemberToTaskRequest")
	proto.RegisterType((*AddTeamMemberToTaskResponse)(nil), "org.gaterace.mservice.project.AddTeamMemberToTaskResponse")
	proto.RegisterType((*RemoveTeamMemberFromTaskRequest)(nil), "org.gaterace.mservice.project.RemoveTeamMemberFromTaskRequest")
	proto.RegisterType((*RemoveTeamMemberFromTaskResponse)(nil), "org.gaterace.mservice.project.RemoveTeamMemberFromTaskResponse")
	proto.RegisterType((*AddTaskHoursRequest)(nil), "org.gaterace.mservice.project.AddTaskHoursRequest")
	proto.RegisterType((*AddTaskHoursResponse)(nil), "org.gaterace.mservice.project.AddTaskHoursResponse")
	proto.RegisterType((*CreateProjectRoleTypeRequest)(nil), "org.gaterace.mservice.project.CreateProjectRoleTypeRequest")
	proto.RegisterType((*CreateProjectRoleTypeResponse)(nil), "org.gaterace.mservice.project.CreateProjectRoleTypeResponse")
	proto.RegisterType((*UpdateProjectRoleTypeRequest)(nil), "org.gaterace.mservice.project.UpdateProjectRoleTypeRequest")
	proto.RegisterType((*UpdateProjectRoleTypeResponse)(nil), "org.gaterace.mservice.project.UpdateProjectRoleTypeResponse")
	proto.RegisterType((*DeleteProjectRoleTypeRequest)(nil), "org.gaterace.mservice.project.DeleteProjectRoleTypeRequest")
	proto.RegisterType((*DeleteProjectRoleTypeResponse)(nil), "org.gaterace.mservice.project.DeleteProjectRoleTypeResponse")
	proto.RegisterType((*GetProjectRoleTypeRequest)(nil), "org.gaterace.mservice.project.GetProjectRoleTypeRequest")
	proto.RegisterType((*GetProjectRoleTypeResponse)(nil), "org.gaterace.mservice.project.GetProjectRoleTypeResponse")
	proto.RegisterType((*GetProjectRoleTypesRequest)(nil), "org.gaterace.mservice.project.GetProjectRoleTypesRequest")
	proto.RegisterType((*GetProjectRoleTypesResponse)(nil), "org.gaterace.mservice.project.GetProjectRoleTypesResponse")
	proto.RegisterType((*GetServerVersionRequest)(nil), "org.gaterace.mservice.project.GetServerVersionRequest")
	proto.RegisterType((*GetServerVersionResponse)(nil), "org.gaterace.mservice.project.GetServerVersionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MServiceProject service

type MServiceProjectClient interface {
	// create a new project
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// update an existing project
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	// delete an existing project
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	// get list of project names for this mservice id
	GetProjectNames(ctx context.Context, in *GetProjectNamesRequest, opts ...grpc.CallOption) (*GetProjectNamesResponse, error)
	// get project entity by name
	GetProjectByName(ctx context.Context, in *GetProjectByNameRequest, opts ...grpc.CallOption) (*GetProjectByNameResponse, error)
	// get project entity by id
	GetProjectById(ctx context.Context, in *GetProjectByIdRequest, opts ...grpc.CallOption) (*GetProjectByIdResponse, error)
	// get project entity wrapper by name
	GetProjectWrapperByName(ctx context.Context, in *GetProjectWrapperByNameRequest, opts ...grpc.CallOption) (*GetProjectWrapperByNameResponse, error)
	// get project entity wrapper by id
	GetProjectWrapperById(ctx context.Context, in *GetProjectWrapperByIdRequest, opts ...grpc.CallOption) (*GetProjectWrapperByIdResponse, error)
	// create a new status type
	CreateStatusType(ctx context.Context, in *CreateStatusTypeRequest, opts ...grpc.CallOption) (*CreateStatusTypeResponse, error)
	// update a status type
	UpdateStatusType(ctx context.Context, in *UpdateStatusTypeRequest, opts ...grpc.CallOption) (*UpdateStatusTypeResponse, error)
	// delete a status type
	DeleteStatusType(ctx context.Context, in *DeleteStatusTypeRequest, opts ...grpc.CallOption) (*DeleteStatusTypeResponse, error)
	// get status type by id
	GetStatusType(ctx context.Context, in *GetStatusTypeRequest, opts ...grpc.CallOption) (*GetStatusTypeResponse, error)
	// get all status types for this mservice id
	GetStatusTypes(ctx context.Context, in *GetStatusTypesRequest, opts ...grpc.CallOption) (*GetStatusTypesResponse, error)
	// create a new task
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	// update an existing task
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	// delete an existing task
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	// get a task by id
	GetTaskById(ctx context.Context, in *GetTaskByIdRequest, opts ...grpc.CallOption) (*GetTaskByIdResponse, error)
	// get a task with asspciations by id
	GetTaskWrapperById(ctx context.Context, in *GetTaskWrapperByIdRequest, opts ...grpc.CallOption) (*GetTaskWrapperByIdResponse, error)
	// reorder the positions of child tasks
	ReorderChildTasks(ctx context.Context, in *ReorderChildTasksRequest, opts ...grpc.CallOption) (*ReorderChildTasksResponse, error)
	// get list of tasks in project
	GetTasksByProject(ctx context.Context, in *GetTasksByProjectRequest, opts ...grpc.CallOption) (*GetTasksByProjectResponse, error)
	// create a new team member for the project
	CreateTeamMember(ctx context.Context, in *CreateTeamMemberRequest, opts ...grpc.CallOption) (*CreateTeamMemberResponse, error)
	// update an existing team member
	UpdateTeamMember(ctx context.Context, in *UpdateTeamMemberRequest, opts ...grpc.CallOption) (*UpdateTeamMemberResponse, error)
	// delete an existing team member
	DeleteTeamMember(ctx context.Context, in *DeleteTeamMemberRequest, opts ...grpc.CallOption) (*DeleteTeamMemberResponse, error)
	// get team member by id
	GetTeamMemberById(ctx context.Context, in *GetTeamMemberByIdRequest, opts ...grpc.CallOption) (*GetTeamMemberByIdResponse, error)
	// get team members by project
	GetTeamMemberByProject(ctx context.Context, in *GetTeamMemberByProjectRequest, opts ...grpc.CallOption) (*GetTeamMemberByProjectResponse, error)
	// get team members by task
	GetTeamMemberByTask(ctx context.Context, in *GetTeamMemberByTaskRequest, opts ...grpc.CallOption) (*GetTeamMemberByTaskResponse, error)
	// add a team member to a task
	AddTeamMemberToTask(ctx context.Context, in *AddTeamMemberToTaskRequest, opts ...grpc.CallOption) (*AddTeamMemberToTaskResponse, error)
	// remove a team member from a task
	RemoveTeamMemberFromTask(ctx context.Context, in *RemoveTeamMemberFromTaskRequest, opts ...grpc.CallOption) (*RemoveTeamMemberFromTaskResponse, error)
	// add to existing task hours for task and member
	AddTaskHours(ctx context.Context, in *AddTaskHoursRequest, opts ...grpc.CallOption) (*AddTaskHoursResponse, error)
	// create a new project role type
	CreateProjectRoleType(ctx context.Context, in *CreateProjectRoleTypeRequest, opts ...grpc.CallOption) (*CreateProjectRoleTypeResponse, error)
	// update an existing project role type
	UpdateProjectRoleType(ctx context.Context, in *UpdateProjectRoleTypeRequest, opts ...grpc.CallOption) (*UpdateProjectRoleTypeResponse, error)
	// delete an existing project role type
	DeleteProjectRoleType(ctx context.Context, in *DeleteProjectRoleTypeRequest, opts ...grpc.CallOption) (*DeleteProjectRoleTypeResponse, error)
	// get a project role type by id
	GetProjectRoleType(ctx context.Context, in *GetProjectRoleTypeRequest, opts ...grpc.CallOption) (*GetProjectRoleTypeResponse, error)
	// get all project role types for an mservice id
	GetProjectRoleTypes(ctx context.Context, in *GetProjectRoleTypesRequest, opts ...grpc.CallOption) (*GetProjectRoleTypesResponse, error)
	// get current server version and uptime - health check
	GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error)
}

type mServiceProjectClient struct {
	cc *grpc.ClientConn
}

func NewMServiceProjectClient(cc *grpc.ClientConn) MServiceProjectClient {
	return &mServiceProjectClient{cc}
}

func (c *mServiceProjectClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/create_project", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/update_project", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/delete_project", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetProjectNames(ctx context.Context, in *GetProjectNamesRequest, opts ...grpc.CallOption) (*GetProjectNamesResponse, error) {
	out := new(GetProjectNamesResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_project_names", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetProjectByName(ctx context.Context, in *GetProjectByNameRequest, opts ...grpc.CallOption) (*GetProjectByNameResponse, error) {
	out := new(GetProjectByNameResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_project_by_name", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetProjectById(ctx context.Context, in *GetProjectByIdRequest, opts ...grpc.CallOption) (*GetProjectByIdResponse, error) {
	out := new(GetProjectByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_project_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetProjectWrapperByName(ctx context.Context, in *GetProjectWrapperByNameRequest, opts ...grpc.CallOption) (*GetProjectWrapperByNameResponse, error) {
	out := new(GetProjectWrapperByNameResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_project_wrapper_by_name", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetProjectWrapperById(ctx context.Context, in *GetProjectWrapperByIdRequest, opts ...grpc.CallOption) (*GetProjectWrapperByIdResponse, error) {
	out := new(GetProjectWrapperByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_project_wrapper_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) CreateStatusType(ctx context.Context, in *CreateStatusTypeRequest, opts ...grpc.CallOption) (*CreateStatusTypeResponse, error) {
	out := new(CreateStatusTypeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/create_status_type", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) UpdateStatusType(ctx context.Context, in *UpdateStatusTypeRequest, opts ...grpc.CallOption) (*UpdateStatusTypeResponse, error) {
	out := new(UpdateStatusTypeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/update_status_type", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) DeleteStatusType(ctx context.Context, in *DeleteStatusTypeRequest, opts ...grpc.CallOption) (*DeleteStatusTypeResponse, error) {
	out := new(DeleteStatusTypeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/delete_status_type", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetStatusType(ctx context.Context, in *GetStatusTypeRequest, opts ...grpc.CallOption) (*GetStatusTypeResponse, error) {
	out := new(GetStatusTypeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_status_type", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetStatusTypes(ctx context.Context, in *GetStatusTypesRequest, opts ...grpc.CallOption) (*GetStatusTypesResponse, error) {
	out := new(GetStatusTypesResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_status_types", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/create_task", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	out := new(UpdateTaskResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/update_task", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	out := new(DeleteTaskResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/delete_task", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetTaskById(ctx context.Context, in *GetTaskByIdRequest, opts ...grpc.CallOption) (*GetTaskByIdResponse, error) {
	out := new(GetTaskByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_task_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetTaskWrapperById(ctx context.Context, in *GetTaskWrapperByIdRequest, opts ...grpc.CallOption) (*GetTaskWrapperByIdResponse, error) {
	out := new(GetTaskWrapperByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_task_wrapper_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) ReorderChildTasks(ctx context.Context, in *ReorderChildTasksRequest, opts ...grpc.CallOption) (*ReorderChildTasksResponse, error) {
	out := new(ReorderChildTasksResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/reorder_child_tasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetTasksByProject(ctx context.Context, in *GetTasksByProjectRequest, opts ...grpc.CallOption) (*GetTasksByProjectResponse, error) {
	out := new(GetTasksByProjectResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_tasks_by_project", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) CreateTeamMember(ctx context.Context, in *CreateTeamMemberRequest, opts ...grpc.CallOption) (*CreateTeamMemberResponse, error) {
	out := new(CreateTeamMemberResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/create_team_member", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) UpdateTeamMember(ctx context.Context, in *UpdateTeamMemberRequest, opts ...grpc.CallOption) (*UpdateTeamMemberResponse, error) {
	out := new(UpdateTeamMemberResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/update_team_member", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) DeleteTeamMember(ctx context.Context, in *DeleteTeamMemberRequest, opts ...grpc.CallOption) (*DeleteTeamMemberResponse, error) {
	out := new(DeleteTeamMemberResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/delete_team_member", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetTeamMemberById(ctx context.Context, in *GetTeamMemberByIdRequest, opts ...grpc.CallOption) (*GetTeamMemberByIdResponse, error) {
	out := new(GetTeamMemberByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_team_member_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetTeamMemberByProject(ctx context.Context, in *GetTeamMemberByProjectRequest, opts ...grpc.CallOption) (*GetTeamMemberByProjectResponse, error) {
	out := new(GetTeamMemberByProjectResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_team_member_by_project", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetTeamMemberByTask(ctx context.Context, in *GetTeamMemberByTaskRequest, opts ...grpc.CallOption) (*GetTeamMemberByTaskResponse, error) {
	out := new(GetTeamMemberByTaskResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_team_member_by_task", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) AddTeamMemberToTask(ctx context.Context, in *AddTeamMemberToTaskRequest, opts ...grpc.CallOption) (*AddTeamMemberToTaskResponse, error) {
	out := new(AddTeamMemberToTaskResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/add_team_member_to_task", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) RemoveTeamMemberFromTask(ctx context.Context, in *RemoveTeamMemberFromTaskRequest, opts ...grpc.CallOption) (*RemoveTeamMemberFromTaskResponse, error) {
	out := new(RemoveTeamMemberFromTaskResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/remove_team_member_from_task", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) AddTaskHours(ctx context.Context, in *AddTaskHoursRequest, opts ...grpc.CallOption) (*AddTaskHoursResponse, error) {
	out := new(AddTaskHoursResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/add_task_hours", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) CreateProjectRoleType(ctx context.Context, in *CreateProjectRoleTypeRequest, opts ...grpc.CallOption) (*CreateProjectRoleTypeResponse, error) {
	out := new(CreateProjectRoleTypeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/create_project_role_type", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) UpdateProjectRoleType(ctx context.Context, in *UpdateProjectRoleTypeRequest, opts ...grpc.CallOption) (*UpdateProjectRoleTypeResponse, error) {
	out := new(UpdateProjectRoleTypeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/update_project_role_type", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) DeleteProjectRoleType(ctx context.Context, in *DeleteProjectRoleTypeRequest, opts ...grpc.CallOption) (*DeleteProjectRoleTypeResponse, error) {
	out := new(DeleteProjectRoleTypeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/delete_project_role_type", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetProjectRoleType(ctx context.Context, in *GetProjectRoleTypeRequest, opts ...grpc.CallOption) (*GetProjectRoleTypeResponse, error) {
	out := new(GetProjectRoleTypeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_project_role_type", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetProjectRoleTypes(ctx context.Context, in *GetProjectRoleTypesRequest, opts ...grpc.CallOption) (*GetProjectRoleTypesResponse, error) {
	out := new(GetProjectRoleTypesResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_project_role_types", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error) {
	out := new(GetServerVersionResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_server_version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MServiceProject service

type MServiceProjectServer interface {
	// create a new project
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// update an existing project
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	// delete an existing project
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	// get list of project names for this mservice id
	GetProjectNames(context.Context, *GetProjectNamesRequest) (*GetProjectNamesResponse, error)
	// get project entity by name
	GetProjectByName(context.Context, *GetProjectByNameRequest) (*GetProjectByNameResponse, error)
	// get project entity by id
	GetProjectById(context.Context, *GetProjectByIdRequest) (*GetProjectByIdResponse, error)
	// get project entity wrapper by name
	GetProjectWrapperByName(context.Context, *GetProjectWrapperByNameRequest) (*GetProjectWrapperByNameResponse, error)
	// get project entity wrapper by id
	GetProjectWrapperById(context.Context, *GetProjectWrapperByIdRequest) (*GetProjectWrapperByIdResponse, error)
	// create a new status type
	CreateStatusType(context.Context, *CreateStatusTypeRequest) (*CreateStatusTypeResponse, error)
	// update a status type
	UpdateStatusType(context.Context, *UpdateStatusTypeRequest) (*UpdateStatusTypeResponse, error)
	// delete a status type
	DeleteStatusType(context.Context, *DeleteStatusTypeRequest) (*DeleteStatusTypeResponse, error)
	// get status type by id
	GetStatusType(context.Context, *GetStatusTypeRequest) (*GetStatusTypeResponse, error)
	// get all status types for this mservice id
	GetStatusTypes(context.Context, *GetStatusTypesRequest) (*GetStatusTypesResponse, error)
	// create a new task
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	// update an existing task
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	// delete an existing task
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	// get a task by id
	GetTaskById(context.Context, *GetTaskByIdRequest) (*GetTaskByIdResponse, error)
	// get a task with asspciations by id
	GetTaskWrapperById(context.Context, *GetTaskWrapperByIdRequest) (*GetTaskWrapperByIdResponse, error)
	// reorder the positions of child tasks
	ReorderChildTasks(context.Context, *ReorderChildTasksRequest) (*ReorderChildTasksResponse, error)
	// get list of tasks in project
	GetTasksByProject(context.Context, *GetTasksByProjectRequest) (*GetTasksByProjectResponse, error)
	// create a new team member for the project
	CreateTeamMember(context.Context, *CreateTeamMemberRequest) (*CreateTeamMemberResponse, error)
	// update an existing team member
	UpdateTeamMember(context.Context, *UpdateTeamMemberRequest) (*UpdateTeamMemberResponse, error)
	// delete an existing team member
	DeleteTeamMember(context.Context, *DeleteTeamMemberRequest) (*DeleteTeamMemberResponse, error)
	// get team member by id
	GetTeamMemberById(context.Context, *GetTeamMemberByIdRequest) (*GetTeamMemberByIdResponse, error)
	// get team members by project
	GetTeamMemberByProject(context.Context, *GetTeamMemberByProjectRequest) (*GetTeamMemberByProjectResponse, error)
	// get team members by task
	GetTeamMemberByTask(context.Context, *GetTeamMemberByTaskRequest) (*GetTeamMemberByTaskResponse, error)
	// add a team member to a task
	AddTeamMemberToTask(context.Context, *AddTeamMemberToTaskRequest) (*AddTeamMemberToTaskResponse, error)
	// remove a team member from a task
	RemoveTeamMemberFromTask(context.Context, *RemoveTeamMemberFromTaskRequest) (*RemoveTeamMemberFromTaskResponse, error)
	// add to existing task hours for task and member
	AddTaskHours(context.Context, *AddTaskHoursRequest) (*AddTaskHoursResponse, error)
	// create a new project role type
	CreateProjectRoleType(context.Context, *CreateProjectRoleTypeRequest) (*CreateProjectRoleTypeResponse, error)
	// update an existing project role type
	UpdateProjectRoleType(context.Context, *UpdateProjectRoleTypeRequest) (*UpdateProjectRoleTypeResponse, error)
	// delete an existing project role type
	DeleteProjectRoleType(context.Context, *DeleteProjectRoleTypeRequest) (*DeleteProjectRoleTypeResponse, error)
	// get a project role type by id
	GetProjectRoleType(context.Context, *GetProjectRoleTypeRequest) (*GetProjectRoleTypeResponse, error)
	// get all project role types for an mservice id
	GetProjectRoleTypes(context.Context, *GetProjectRoleTypesRequest) (*GetProjectRoleTypesResponse, error)
	// get current server version and uptime - health check
	GetServerVersion(context.Context, *GetServerVersionRequest) (*GetServerVersionResponse, error)
}

func RegisterMServiceProjectServer(s *grpc.Server, srv MServiceProjectServer) {
	s.RegisterService(&_MServiceProject_serviceDesc, srv)
}

func _MServiceProject_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetProjectNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetProjectNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetProjectNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetProjectNames(ctx, req.(*GetProjectNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetProjectByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetProjectByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetProjectByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetProjectByName(ctx, req.(*GetProjectByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetProjectById(ctx, req.(*GetProjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetProjectWrapperByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectWrapperByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetProjectWrapperByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetProjectWrapperByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetProjectWrapperByName(ctx, req.(*GetProjectWrapperByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetProjectWrapperById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectWrapperByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetProjectWrapperById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetProjectWrapperById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetProjectWrapperById(ctx, req.(*GetProjectWrapperByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_CreateStatusType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatusTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).CreateStatusType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/CreateStatusType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).CreateStatusType(ctx, req.(*CreateStatusTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_UpdateStatusType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).UpdateStatusType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/UpdateStatusType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).UpdateStatusType(ctx, req.(*UpdateStatusTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_DeleteStatusType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatusTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).DeleteStatusType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/DeleteStatusType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).DeleteStatusType(ctx, req.(*DeleteStatusTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetStatusType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetStatusType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetStatusType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetStatusType(ctx, req.(*GetStatusTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetStatusTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetStatusTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetStatusTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetStatusTypes(ctx, req.(*GetStatusTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetTaskById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetTaskById(ctx, req.(*GetTaskByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetTaskWrapperById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskWrapperByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetTaskWrapperById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetTaskWrapperById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetTaskWrapperById(ctx, req.(*GetTaskWrapperByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_ReorderChildTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderChildTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).ReorderChildTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/ReorderChildTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).ReorderChildTasks(ctx, req.(*ReorderChildTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetTasksByProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksByProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetTasksByProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetTasksByProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetTasksByProject(ctx, req.(*GetTasksByProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_CreateTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).CreateTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/CreateTeamMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).CreateTeamMember(ctx, req.(*CreateTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_UpdateTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).UpdateTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/UpdateTeamMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).UpdateTeamMember(ctx, req.(*UpdateTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_DeleteTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).DeleteTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/DeleteTeamMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).DeleteTeamMember(ctx, req.(*DeleteTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetTeamMemberById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamMemberByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetTeamMemberById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetTeamMemberById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetTeamMemberById(ctx, req.(*GetTeamMemberByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetTeamMemberByProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamMemberByProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetTeamMemberByProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetTeamMemberByProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetTeamMemberByProject(ctx, req.(*GetTeamMemberByProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetTeamMemberByTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamMemberByTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetTeamMemberByTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetTeamMemberByTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetTeamMemberByTask(ctx, req.(*GetTeamMemberByTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_AddTeamMemberToTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamMemberToTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).AddTeamMemberToTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/AddTeamMemberToTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).AddTeamMemberToTask(ctx, req.(*AddTeamMemberToTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_RemoveTeamMemberFromTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamMemberFromTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).RemoveTeamMemberFromTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/RemoveTeamMemberFromTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).RemoveTeamMemberFromTask(ctx, req.(*RemoveTeamMemberFromTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_AddTaskHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).AddTaskHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/AddTaskHours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).AddTaskHours(ctx, req.(*AddTaskHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_CreateProjectRoleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRoleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).CreateProjectRoleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/CreateProjectRoleType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).CreateProjectRoleType(ctx, req.(*CreateProjectRoleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_UpdateProjectRoleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRoleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).UpdateProjectRoleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/UpdateProjectRoleType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).UpdateProjectRoleType(ctx, req.(*UpdateProjectRoleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_DeleteProjectRoleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRoleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).DeleteProjectRoleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/DeleteProjectRoleType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).DeleteProjectRoleType(ctx, req.(*DeleteProjectRoleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetProjectRoleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRoleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetProjectRoleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetProjectRoleType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetProjectRoleType(ctx, req.(*GetProjectRoleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetProjectRoleTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRoleTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetProjectRoleTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetProjectRoleTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetProjectRoleTypes(ctx, req.(*GetProjectRoleTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetServerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetServerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/GetServerVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetServerVersion(ctx, req.(*GetServerVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MServiceProject_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.gaterace.mservice.project.MServiceProject",
	HandlerType: (*MServiceProjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create_project",
			Handler:    _MServiceProject_CreateProject_Handler,
		},
		{
			MethodName: "update_project",
			Handler:    _MServiceProject_UpdateProject_Handler,
		},
		{
			MethodName: "delete_project",
			Handler:    _MServiceProject_DeleteProject_Handler,
		},
		{
			MethodName: "get_project_names",
			Handler:    _MServiceProject_GetProjectNames_Handler,
		},
		{
			MethodName: "get_project_by_name",
			Handler:    _MServiceProject_GetProjectByName_Handler,
		},
		{
			MethodName: "get_project_by_id",
			Handler:    _MServiceProject_GetProjectById_Handler,
		},
		{
			MethodName: "get_project_wrapper_by_name",
			Handler:    _MServiceProject_GetProjectWrapperByName_Handler,
		},
		{
			MethodName: "get_project_wrapper_by_id",
			Handler:    _MServiceProject_GetProjectWrapperById_Handler,
		},
		{
			MethodName: "create_status_type",
			Handler:    _MServiceProject_CreateStatusType_Handler,
		},
		{
			MethodName: "update_status_type",
			Handler:    _MServiceProject_UpdateStatusType_Handler,
		},
		{
			MethodName: "delete_status_type",
			Handler:    _MServiceProject_DeleteStatusType_Handler,
		},
		{
			MethodName: "get_status_type",
			Handler:    _MServiceProject_GetStatusType_Handler,
		},
		{
			MethodName: "get_status_types",
			Handler:    _MServiceProject_GetStatusTypes_Handler,
		},
		{
			MethodName: "create_task",
			Handler:    _MServiceProject_CreateTask_Handler,
		},
		{
			MethodName: "update_task",
			Handler:    _MServiceProject_UpdateTask_Handler,
		},
		{
			MethodName: "delete_task",
			Handler:    _MServiceProject_DeleteTask_Handler,
		},
		{
			MethodName: "get_task_by_id",
			Handler:    _MServiceProject_GetTaskById_Handler,
		},
		{
			MethodName: "get_task_wrapper_by_id",
			Handler:    _MServiceProject_GetTaskWrapperById_Handler,
		},
		{
			MethodName: "reorder_child_tasks",
			Handler:    _MServiceProject_ReorderChildTasks_Handler,
		},
		{
			MethodName: "get_tasks_by_project",
			Handler:    _MServiceProject_GetTasksByProject_Handler,
		},
		{
			MethodName: "create_team_member",
			Handler:    _MServiceProject_CreateTeamMember_Handler,
		},
		{
			MethodName: "update_team_member",
			Handler:    _MServiceProject_UpdateTeamMember_Handler,
		},
		{
			MethodName: "delete_team_member",
			Handler:    _MServiceProject_DeleteTeamMember_Handler,
		},
		{
			MethodName: "get_team_member_by_id",
			Handler:    _MServiceProject_GetTeamMemberById_Handler,
		},
		{
			MethodName: "get_team_member_by_project",
			Handler:    _MServiceProject_GetTeamMemberByProject_Handler,
		},
		{
			MethodName: "get_team_member_by_task",
			Handler:    _MServiceProject_GetTeamMemberByTask_Handler,
		},
		{
			MethodName: "add_team_member_to_task",
			Handler:    _MServiceProject_AddTeamMemberToTask_Handler,
		},
		{
			MethodName: "remove_team_member_from_task",
			Handler:    _MServiceProject_RemoveTeamMemberFromTask_Handler,
		},
		{
			MethodName: "add_task_hours",
			Handler:    _MServiceProject_AddTaskHours_Handler,
		},
		{
			MethodName: "create_project_role_type",
			Handler:    _MServiceProject_CreateProjectRoleType_Handler,
		},
		{
			MethodName: "update_project_role_type",
			Handler:    _MServiceProject_UpdateProjectRoleType_Handler,
		},
		{
			MethodName: "delete_project_role_type",
			Handler:    _MServiceProject_DeleteProjectRoleType_Handler,
		},
		{
			MethodName: "get_project_role_type",
			Handler:    _MServiceProject_GetProjectRoleType_Handler,
		},
		{
			MethodName: "get_project_role_types",
			Handler:    _MServiceProject_GetProjectRoleTypes_Handler,
		},
		{
			MethodName: "get_server_version",
			Handler:    _MServiceProject_GetServerVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MServiceProject.proto",
}

func init() { proto.RegisterFile("MServiceProject.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0xcd, 0x8f, 0x1c, 0x47,
	0x15, 0x57, 0xcd, 0xc7, 0xee, 0xcc, 0x9b, 0xd9, 0xd9, 0x6c, 0xef, 0x3a, 0x3b, 0x1e, 0xaf, 0xf1,
	0xa8, 0x4d, 0xc2, 0x86, 0x8f, 0x15, 0x59, 0x3b, 0x78, 0x37, 0xc4, 0x01, 0x6c, 0x83, 0x59, 0x88,
	0x2d, 0x6b, 0xbc, 0x76, 0x90, 0x0f, 0x8c, 0xda, 0xdb, 0xe5, 0x4d, 0x93, 0xed, 0xed, 0x49, 0x57,
	0xaf, 0xe3, 0x91, 0x41, 0x7c, 0x48, 0x7c, 0x83, 0x40, 0x28, 0x41, 0x4a, 0x40, 0xc0, 0x09, 0x24,
	0x23, 0x04, 0x42, 0x88, 0x4b, 0x84, 0x84, 0x94, 0x23, 0x42, 0x1c, 0x38, 0x71, 0xe5, 0x92, 0x7f,
	0x82, 0x03, 0xaa, 0xea, 0xea, 0x99, 0xea, 0xee, 0xea, 0x8f, 0xda, 0xf4, 0xb6, 0x12, 0xcb, 0xb7,
	0xe9, 0xea, 0xae, 0xf7, 0x7e, 0xef, 0x57, 0xaf, 0xea, 0x55, 0xbd, 0x57, 0xbb, 0x70, 0xec, 0xca,
	0x75, 0xec, 0xde, 0xb5, 0x76, 0xf0, 0x35, 0xd7, 0xf9, 0x0a, 0xde, 0xf1, 0xd6, 0x46, 0xae, 0xe3,
	0x39, 0xda, 0x49, 0xc7, 0xdd, 0x5d, 0xdb, 0x35, 0x3c, 0xec, 0x1a, 0x3b, 0x78, 0xcd, 0x26, 0xfe,
	0x37, 0xf4, 0x25, 0xfd, 0xa8, 0xa7, 0x5d, 0xb2, 0xf7, 0x3e, 0x7b, 0xcf, 0xc3, 0xfb, 0xc4, 0x72,
	0xf6, 0xfd, 0x2e, 0xfa, 0x3f, 0xaa, 0x30, 0xcb, 0x85, 0x68, 0x27, 0x01, 0xf8, 0xa7, 0x43, 0xcb,
	0xec, 0xa2, 0x3e, 0x5a, 0xad, 0x0e, 0x9a, 0xbc, 0x65, 0xcb, 0xd4, 0x3e, 0x04, 0xb3, 0x3b, 0x2e,
	0x36, 0x3c, 0x6c, 0x76, 0x2b, 0x7d, 0xb4, 0xda, 0x5a, 0x9f, 0x5b, 0x33, 0xed, 0xbd, 0xb5, 0x4b,
	0x86, 0x87, 0xb7, 0x2d, 0x1b, 0x0f, 0x82, 0xb7, 0xda, 0x53, 0xd0, 0xb0, 0x1d, 0xd3, 0xba, 0x63,
	0x61, 0xb3, 0x5b, 0x95, 0x7d, 0x39, 0x79, 0x4d, 0x65, 0x9a, 0x78, 0x0f, 0x53, 0x99, 0x35, 0xa9,
	0x4c, 0xfe, 0x96, 0x62, 0xb3, 0xc8, 0x30, 0xf8, 0xb6, 0xde, 0x47, 0xab, 0x8d, 0x41, 0xd3, 0x22,
	0x97, 0xf8, 0xeb, 0x2e, 0xcc, 0xde, 0xc5, 0x2e, 0xb5, 0xab, 0x3b, 0xd3, 0x47, 0xab, 0xf5, 0x41,
	0xf0, 0xa8, 0x9d, 0x82, 0x56, 0x40, 0x04, 0xb5, 0x6a, 0x96, 0x59, 0x05, 0x41, 0xd3, 0x96, 0xa9,
	0x69, 0x50, 0xdb, 0x37, 0x6c, 0xdc, 0x6d, 0xf4, 0xd1, 0x6a, 0x73, 0xc0, 0x7e, 0x6b, 0x7d, 0x68,
	0x99, 0x98, 0xec, 0xb8, 0xd6, 0xc8, 0xa3, 0x22, 0x9b, 0xec, 0x95, 0xd8, 0xa4, 0x9d, 0x80, 0x26,
	0xf1, 0x0c, 0xef, 0x80, 0x50, 0xa1, 0xc0, 0x54, 0x36, 0xfc, 0x86, 0x2d, 0x93, 0xea, 0xe4, 0x2f,
	0x99, 0xe4, 0x16, 0xeb, 0x0e, 0x7e, 0xd3, 0x55, 0x2a, 0xff, 0xa3, 0x40, 0x9f, 0x5c, 0x6f, 0x68,
	0x1a, 0x1e, 0xee, 0xb6, 0x65, 0x96, 0x37, 0xd9, 0x07, 0xf4, 0x51, 0x5b, 0x85, 0x06, 0xde, 0x37,
	0xfd, 0x6f, 0xe7, 0xa4, 0x2c, 0xe1, 0x7d, 0x93, 0x3e, 0xe8, 0xff, 0xab, 0x41, 0x87, 0x8f, 0xe6,
	0x8b, 0xae, 0x31, 0x1a, 0x61, 0xf7, 0xd1, 0xa0, 0xbe, 0xdf, 0x07, 0x55, 0x7b, 0x01, 0xda, 0x1e,
	0x36, 0xec, 0xa1, 0x8d, 0xed, 0xdb, 0xd8, 0x25, 0xdd, 0x4e, 0xbf, 0xba, 0xda, 0x5a, 0x7f, 0x6a,
	0x2d, 0x75, 0xb2, 0xaf, 0x6d, 0x63, 0xc3, 0xbe, 0xc2, 0x7a, 0x0c, 0x5a, 0xde, 0xe4, 0x37, 0xd1,
	0x6e, 0xc1, 0xe2, 0xce, 0x4b, 0xd6, 0x9e, 0x39, 0xf4, 0x0c, 0xf2, 0xf2, 0xf0, 0x55, 0xdf, 0x4b,
	0x48, 0x77, 0x9e, 0x09, 0xfd, 0x70, 0x96, 0x50, 0x83, 0xbc, 0xcc, 0x1d, 0x6b, 0xb0, 0xc0, 0xc4,
	0x08, 0x2d, 0x44, 0x7f, 0xbb, 0x02, 0x70, 0x9d, 0x11, 0xb2, 0x3d, 0x1e, 0xe1, 0x30, 0x9d, 0x28,
	0x42, 0xe7, 0x43, 0xea, 0x78, 0x11, 0x2f, 0x69, 0xc4, 0xbc, 0x24, 0xd3, 0x0b, 0xf5, 0xbf, 0xd6,
	0xa0, 0x46, 0x69, 0xd5, 0x96, 0x61, 0x96, 0x0d, 0xd2, 0x64, 0xde, 0xce, 0xd0, 0xc7, 0x87, 0x97,
	0xbb, 0xf0, 0x52, 0xd5, 0x88, 0x2e, 0x55, 0xc1, 0x9c, 0x6e, 0x26, 0xcf, 0x69, 0xc8, 0x98, 0xd3,
	0xad, 0xf4, 0x39, 0xdd, 0xce, 0x98, 0xd3, 0x73, 0x0a, 0x73, 0xba, 0x93, 0x3a, 0xa7, 0x7b, 0xd0,
	0x18, 0xb9, 0x96, 0xe3, 0x5a, 0xde, 0xb8, 0x3b, 0xef, 0x83, 0x0a, 0x9e, 0x29, 0xe2, 0x91, 0xe1,
	0xe2, 0x7d, 0xc6, 0xc2, 0x63, 0x8c, 0x85, 0x86, 0xdf, 0xb0, 0x65, 0xb2, 0x8e, 0x0e, 0xb1, 0x98,
	0xb5, 0x0b, 0xbc, 0x23, 0x7f, 0xd6, 0xdf, 0xa9, 0x43, 0x4b, 0x98, 0x8f, 0x8f, 0xfc, 0xe7, 0x91,
	0xff, 0xa8, 0xf8, 0x4f, 0x2c, 0xd0, 0x68, 0x47, 0x11, 0x68, 0x16, 0x8b, 0x08, 0x34, 0x6f, 0x55,
	0x01, 0xa6, 0x7a, 0xa9, 0xc5, 0x3e, 0xe6, 0xa9, 0xab, 0x37, 0xfc, 0x86, 0x47, 0xce, 0x2e, 0x38,
	0xfb, 0x93, 0x30, 0x1f, 0x74, 0x71, 0x9d, 0x3d, 0x3c, 0xdd, 0xe4, 0xcc, 0xf1, 0xe6, 0x81, 0xb3,
	0x47, 0x45, 0x9f, 0x80, 0x26, 0x7b, 0x2f, 0xec, 0x73, 0x1a, 0xb4, 0x81, 0x79, 0xf4, 0x12, 0xd4,
	0xb1, 0x6d, 0x58, 0x7b, 0xdc, 0xd9, 0xfd, 0x07, 0xed, 0x23, 0x00, 0x6c, 0x98, 0x5f, 0x72, 0x0e,
	0x5c, 0xc2, 0xfd, 0xbc, 0xed, 0x73, 0x82, 0x77, 0x2c, 0xdb, 0xd8, 0x1b, 0x34, 0xe9, 0xfb, 0xcf,
	0xd3, 0xd7, 0xfa, 0xbf, 0x2a, 0x30, 0x7f, 0x6d, 0xaa, 0x91, 0xed, 0x15, 0x24, 0xd8, 0x90, 0x0c,
	0xdb, 0x43, 0x3a, 0x9a, 0x21, 0xca, 0x1b, 0x11, 0xca, 0xb3, 0xb7, 0x0c, 0xff, 0xac, 0x40, 0x9b,
	0x4e, 0x90, 0x6d, 0x87, 0xcf, 0x88, 0x8c, 0x5d, 0xbf, 0x10, 0x19, 0x2a, 0xa1, 0xc8, 0x10, 0x9a,
	0x49, 0xd5, 0xe4, 0x99, 0x54, 0xcb, 0xcd, 0x7d, 0x3d, 0x37, 0xf7, 0x33, 0x0a, 0xdc, 0xcf, 0x46,
	0xb9, 0x8f, 0x30, 0xdc, 0x88, 0x31, 0x1c, 0xf6, 0xd0, 0x66, 0xba, 0x87, 0xfe, 0x17, 0xc1, 0xd2,
	0x45, 0x66, 0x4c, 0xe0, 0xa7, 0xf8, 0x95, 0x03, 0x4c, 0xbc, 0xa8, 0x1a, 0x94, 0x78, 0xf0, 0xa8,
	0x24, 0x07, 0x99, 0x6a, 0x46, 0x90, 0xa9, 0x45, 0x82, 0x4c, 0x38, 0x86, 0xd4, 0x15, 0x62, 0xc8,
	0x4c, 0xea, 0x61, 0xf1, 0x35, 0x04, 0xc7, 0x22, 0x46, 0x92, 0x91, 0xb3, 0x4f, 0x30, 0xe5, 0x1a,
	0xbb, 0xae, 0xe3, 0x0e, 0x77, 0x1c, 0x13, 0xf3, 0x79, 0xd8, 0x64, 0x2d, 0x17, 0x1d, 0x13, 0x6b,
	0xa7, 0x61, 0xce, 0x7f, 0x6d, 0x63, 0x42, 0x8c, 0xdd, 0xc0, 0xd8, 0x36, 0x6b, 0xbc, 0xe2, 0xb7,
	0x89, 0x93, 0xa1, 0x1a, 0x9e, 0x0c, 0x61, 0xdf, 0xac, 0x45, 0x7c, 0x53, 0xff, 0x45, 0x05, 0x96,
	0x6e, 0x8c, 0xcc, 0x38, 0xf7, 0x19, 0x3e, 0x1d, 0x19, 0x9a, 0x4a, 0x6c, 0x68, 0x92, 0x11, 0x05,
	0x83, 0x56, 0x4b, 0x1e, 0xb4, 0x7a, 0xc6, 0xa0, 0xcd, 0xa4, 0x0e, 0xda, 0xac, 0xc2, 0xa0, 0x35,
	0x52, 0x07, 0xed, 0x00, 0x8e, 0x45, 0xc8, 0x29, 0x63, 0xcc, 0xf4, 0x11, 0x2c, 0xf9, 0x33, 0xad,
	0xac, 0x31, 0xa1, 0x86, 0x46, 0x34, 0x96, 0x62, 0xe8, 0x26, 0x3c, 0x7e, 0x19, 0x7b, 0x5c, 0x27,
	0x5d, 0x7d, 0x49, 0xde, 0xa9, 0xaf, 0x13, 0x58, 0x8e, 0x75, 0x2d, 0x10, 0xf3, 0x12, 0xd4, 0xa9,
	0x63, 0x92, 0x6e, 0xb5, 0x5f, 0xa5, 0x81, 0x97, 0x3d, 0xe8, 0x57, 0x45, 0xa5, 0x17, 0xc6, 0x54,
	0xed, 0xbb, 0x59, 0xab, 0xf4, 0xdf, 0x20, 0xe8, 0xc6, 0x05, 0x16, 0x68, 0xc6, 0xa7, 0x61, 0x96,
	0xfb, 0x07, 0x0f, 0xcb, 0x4f, 0x66, 0x6c, 0x05, 0x83, 0xf1, 0x0f, 0xba, 0xe9, 0x2f, 0xc2, 0x31,
	0x11, 0xe1, 0x96, 0x99, 0xdb, 0xe0, 0xb0, 0xb7, 0x56, 0xa2, 0x2b, 0xcf, 0xaf, 0x90, 0x38, 0xf8,
	0xbe, 0xe4, 0xf7, 0x94, 0xe5, 0x37, 0xe0, 0x03, 0x53, 0x7c, 0x7c, 0x33, 0x5c, 0xc0, 0x98, 0xff,
	0x0d, 0xc1, 0xa9, 0x44, 0xb9, 0x05, 0x12, 0x70, 0x73, 0xba, 0xc7, 0xe3, 0xc7, 0x01, 0x4e, 0xc4,
	0xc7, 0xf2, 0x11, 0x11, 0x1c, 0x08, 0x3a, 0xa3, 0xd0, 0xb3, 0xfe, 0x65, 0x58, 0x91, 0xc0, 0x2f,
	0xce, 0x2f, 0xde, 0x42, 0x70, 0x32, 0x41, 0xc1, 0xfb, 0x80, 0x9d, 0x37, 0x11, 0x2c, 0xfb, 0x61,
	0x7e, 0x9a, 0x9a, 0xcb, 0xcd, 0x4c, 0x28, 0xc6, 0x55, 0xd2, 0x4f, 0xbf, 0xd5, 0xac, 0x5c, 0x57,
	0x2d, 0xbe, 0x71, 0xbd, 0x07, 0xdd, 0x38, 0xb6, 0x52, 0x16, 0xfa, 0xbf, 0x20, 0x58, 0xf6, 0x23,
	0x69, 0xd1, 0xb4, 0x24, 0xef, 0x33, 0x22, 0x84, 0xd5, 0xb2, 0x08, 0xab, 0x4b, 0x09, 0x8b, 0xa3,
	0x2e, 0x85, 0xb0, 0x57, 0x60, 0xd9, 0x0f, 0xc8, 0xa5, 0xf1, 0x45, 0x8d, 0x8d, 0xab, 0x2c, 0xc5,
	0xd8, 0x6d, 0x58, 0xba, 0x8c, 0xbd, 0x82, 0x2d, 0xd5, 0x7f, 0x87, 0x58, 0xe8, 0x3a, 0x22, 0x6b,
	0xbe, 0x30, 0xf1, 0x2e, 0x6f, 0x3c, 0xc2, 0x7c, 0xf1, 0xc8, 0xca, 0xde, 0x08, 0x58, 0xb8, 0x23,
	0xd2, 0xdf, 0xfa, 0x46, 0x04, 0x68, 0xfe, 0x5d, 0xd0, 0x03, 0x3f, 0x88, 0x86, 0xba, 0x16, 0x68,
	0xe4, 0x0b, 0xd0, 0x16, 0x8c, 0xf4, 0x37, 0x43, 0x4a, 0x56, 0xb6, 0xa6, 0x56, 0x12, 0xfd, 0xdf,
	0x15, 0x58, 0xf0, 0xd7, 0x1f, 0x7a, 0x7a, 0x2e, 0x28, 0x5e, 0x4c, 0x62, 0x6c, 0x35, 0xf9, 0x38,
	0x51, 0xcb, 0x38, 0x4e, 0xd4, 0x53, 0x8f, 0x13, 0x33, 0x0a, 0xc7, 0x89, 0xd9, 0xdc, 0x79, 0xc4,
	0x46, 0x5a, 0x1e, 0xb1, 0x99, 0x92, 0x47, 0x84, 0x48, 0x1e, 0xfa, 0x87, 0x08, 0x34, 0x91, 0xd5,
	0x52, 0x4e, 0x95, 0x42, 0x4a, 0xa3, 0x26, 0xa6, 0x34, 0xf4, 0x77, 0x2a, 0xb0, 0xe0, 0x2f, 0x99,
	0x4a, 0x63, 0x9c, 0x98, 0x22, 0x79, 0x18, 0x8e, 0x91, 0xa1, 0x71, 0x6f, 0xa6, 0x8d, 0x3b, 0xa4,
	0x8c, 0x7b, 0x2b, 0x32, 0xee, 0x2e, 0x68, 0x22, 0xd1, 0xa5, 0x2c, 0xd4, 0xbb, 0xb0, 0xe0, 0x87,
	0x88, 0x23, 0x1e, 0x5c, 0x6a, 0x9c, 0xa8, 0xa8, 0x14, 0xe3, 0xae, 0x82, 0x76, 0x19, 0x7b, 0x54,
	0xa1, 0xd2, 0x76, 0x36, 0xc9, 0x3a, 0xfd, 0x67, 0x08, 0x16, 0x43, 0x02, 0x0b, 0xb4, 0xe2, 0x1c,
	0xd4, 0xa8, 0x16, 0x1e, 0x76, 0x4e, 0xe7, 0xc8, 0xef, 0x0f, 0x58, 0x07, 0xfd, 0x06, 0x1c, 0xe7,
	0x98, 0x0e, 0xb3, 0x75, 0x4f, 0xb4, 0xf5, 0x8f, 0x08, 0x7a, 0x32, 0xb9, 0x05, 0x9a, 0x7c, 0x05,
	0xda, 0x62, 0x6d, 0x83, 0x9b, 0xae, 0x52, 0xda, 0x68, 0x79, 0xd3, 0x07, 0xfd, 0x35, 0x04, 0xdd,
	0x01, 0x76, 0x5c, 0x13, 0xbb, 0x17, 0x83, 0x8a, 0x07, 0x39, 0xca, 0xf5, 0xea, 0x83, 0xd0, 0x11,
	0x2a, 0x34, 0x96, 0x49, 0xba, 0xb5, 0x7e, 0x75, 0xb5, 0x3a, 0x68, 0x4f, 0x0a, 0x2e, 0x5b, 0x26,
	0xd1, 0xc7, 0x70, 0x5c, 0x82, 0xaa, 0x14, 0xff, 0xbf, 0xc5, 0x72, 0x11, 0x4c, 0xe3, 0x85, 0xb1,
	0x6a, 0x26, 0x36, 0xe3, 0x50, 0xf7, 0x26, 0x9a, 0xf8, 0x9d, 0x28, 0xbc, 0x40, 0xbb, 0x36, 0xa1,
	0x4e, 0x89, 0x0d, 0xf6, 0x28, 0xb9, 0xa6, 0x84, 0xdf, 0x43, 0xff, 0xfd, 0xe4, 0xcc, 0x26, 0x54,
	0xd7, 0x8e, 0x70, 0x77, 0x22, 0xa9, 0xbe, 0xd4, 0x64, 0xd5, 0x97, 0x49, 0xf1, 0xa7, 0x2e, 0x14,
	0x7f, 0xf4, 0xd7, 0x51, 0x70, 0x8a, 0x13, 0xd1, 0x96, 0x12, 0xf5, 0x43, 0xf5, 0x8a, 0x5a, 0xb8,
	0x5e, 0xa1, 0xbf, 0x3d, 0x39, 0xe2, 0x1d, 0x82, 0xc5, 0x90, 0xe4, 0x4a, 0xa4, 0x12, 0xa2, 0xb6,
	0x07, 0x90, 0xb0, 0x5b, 0x4f, 0x65, 0x77, 0x46, 0x64, 0x77, 0x72, 0xe2, 0x2b, 0x9b, 0xdc, 0xe9,
	0x89, 0xaf, 0x34, 0xfa, 0xa6, 0x27, 0xbe, 0xd2, 0x8d, 0xfd, 0x92, 0xbf, 0xd6, 0x4c, 0xd4, 0x2a,
	0x45, 0xa1, 0x34, 0x6b, 0xe9, 0x64, 0x3e, 0x2e, 0x11, 0x5d, 0xec, 0xc9, 0x4f, 0x28, 0xdc, 0xe7,
	0x3c, 0xf9, 0x09, 0x0c, 0xc3, 0xb4, 0x6e, 0xaf, 0x0f, 0x59, 0xae, 0x4b, 0x04, 0x5b, 0xf0, 0xc2,
	0xfb, 0x67, 0xc4, 0xb2, 0x98, 0x52, 0x0d, 0xc5, 0x1e, 0x14, 0x43, 0x97, 0x19, 0xaa, 0xef, 0xe6,
	0x32, 0x83, 0x7e, 0xd3, 0xdf, 0x4c, 0x08, 0x98, 0x0b, 0xd9, 0x6f, 0xd2, 0x5d, 0xca, 0x09, 0xa9,
	0xe0, 0xf7, 0x2c, 0x13, 0x04, 0x7a, 0x9f, 0x31, 0xcd, 0xe9, 0xdb, 0x6d, 0xa7, 0x98, 0x9d, 0x77,
	0x5a, 0xe5, 0x59, 0x37, 0xe0, 0x84, 0x54, 0x69, 0x71, 0x2c, 0xe9, 0xf7, 0xe0, 0xd4, 0x00, 0xdb,
	0xce, 0x5d, 0x61, 0xe5, 0xf9, 0x9c, 0xeb, 0xd8, 0x25, 0x18, 0x77, 0x07, 0xfa, 0xc9, 0x9a, 0x0b,
	0xb4, 0xf0, 0x0d, 0x04, 0x8b, 0x94, 0xc5, 0xa0, 0xca, 0x7d, 0xb4, 0x66, 0x45, 0x0a, 0xee, 0xb5,
	0xf4, 0x82, 0xfb, 0x77, 0x11, 0x2c, 0x85, 0xb1, 0x15, 0x38, 0x01, 0xc2, 0x48, 0xaa, 0xe9, 0x48,
	0x7e, 0x8b, 0x60, 0x25, 0x5c, 0x15, 0xe7, 0x57, 0x54, 0x72, 0xd3, 0x25, 0x09, 0xf7, 0x95, 0xcc,
	0x6b, 0x36, 0xd5, 0xf4, 0x3b, 0x1f, 0x92, 0xd4, 0xf9, 0xd7, 0xe0, 0x64, 0x02, 0xce, 0x52, 0xe2,
	0xe5, 0xdf, 0x11, 0xac, 0x84, 0x2b, 0xd1, 0x47, 0xc5, 0x53, 0xea, 0xee, 0x6f, 0xca, 0x60, 0x2d,
	0x9d, 0xc1, 0xba, 0x94, 0xc1, 0x04, 0x0b, 0x4a, 0x61, 0xf0, 0x9b, 0x08, 0x56, 0xc2, 0x25, 0xee,
	0xd2, 0x19, 0xa4, 0x14, 0x24, 0x40, 0x28, 0x85, 0x02, 0x93, 0xed, 0x8c, 0x8e, 0xd8, 0x7c, 0xfd,
	0x0f, 0x7e, 0x2a, 0xe0, 0x28, 0x4d, 0xfc, 0x22, 0xf7, 0x44, 0x21, 0xf3, 0xbe, 0x96, 0xb3, 0xba,
	0x1b, 0xc0, 0x61, 0x9e, 0xcb, 0x92, 0xef, 0xe7, 0x65, 0x70, 0xf3, 0x67, 0xe0, 0xff, 0xe4, 0xef,
	0x29, 0xe2, 0xfd, 0x0b, 0x4d, 0x7d, 0xc0, 0xc4, 0xde, 0x60, 0x47, 0xa1, 0x6a, 0x70, 0x33, 0x30,
	0x98, 0xe8, 0xcf, 0xb2, 0x5b, 0x0c, 0xd7, 0xb1, 0x7b, 0x17, 0xbb, 0x37, 0x7d, 0xdf, 0x10, 0xcc,
	0x35, 0x0f, 0x6c, 0x7b, 0x3c, 0x1c, 0x19, 0xae, 0x61, 0x73, 0xb8, 0xc0, 0x9a, 0xae, 0xd1, 0x16,
	0xfd, 0x81, 0x7f, 0x63, 0x21, 0xd2, 0xb9, 0x40, 0x5b, 0x9f, 0x80, 0x0e, 0x61, 0xc2, 0x87, 0xa2,
	0x17, 0x37, 0x07, 0x73, 0x44, 0x54, 0x49, 0x65, 0xf1, 0xcf, 0x0e, 0x46, 0x9e, 0xc5, 0x17, 0xa4,
	0xea, 0xa0, 0xed, 0x37, 0xde, 0x60, 0x6d, 0xeb, 0xff, 0x79, 0x02, 0xe6, 0x23, 0x7f, 0xbb, 0xa5,
	0xdd, 0x87, 0x8e, 0x7f, 0x71, 0x6e, 0xc8, 0x99, 0xd2, 0xce, 0x64, 0x30, 0x29, 0xbb, 0x9a, 0xd6,
	0x3b, 0xab, 0xd6, 0x89, 0x13, 0x74, 0x1f, 0x3a, 0x07, 0x6c, 0x0d, 0xcc, 0xad, 0x5c, 0x76, 0x37,
	0x2b, 0x53, 0xb9, 0xfc, 0xce, 0xd2, 0x7d, 0xe8, 0xf8, 0x17, 0xfa, 0x72, 0x2b, 0x97, 0x5d, 0x42,
	0xca, 0x54, 0x2e, 0xbf, 0x47, 0xf4, 0x2d, 0x04, 0x0b, 0xbb, 0xd8, 0x0b, 0x54, 0xb3, 0x20, 0x42,
	0xb4, 0x67, 0x32, 0x64, 0xc9, 0x2f, 0x07, 0xf5, 0x3e, 0xa1, 0xda, 0x8d, 0x83, 0xf8, 0x0e, 0x82,
	0x45, 0x11, 0xc4, 0xed, 0x31, 0xc3, 0xa1, 0xe5, 0x97, 0x17, 0xba, 0xff, 0xd1, 0x3b, 0xa7, 0xdc,
	0x8f, 0x03, 0xf9, 0x46, 0x84, 0x8d, 0xdb, 0xe3, 0xa1, 0x65, 0x6a, 0x67, 0x15, 0xc4, 0x4d, 0x8e,
	0xcb, 0xbd, 0x67, 0x14, 0x7b, 0x71, 0x08, 0xbf, 0x44, 0x70, 0x42, 0x84, 0xc0, 0xd3, 0xaa, 0x13,
	0x4e, 0xce, 0xe7, 0x16, 0x2b, 0xbb, 0x1a, 0xd3, 0x7b, 0xfe, 0xb0, 0xdd, 0x39, 0xbc, 0x9f, 0x23,
	0x38, 0x9e, 0x00, 0xcf, 0x32, 0xb5, 0x4f, 0xaa, 0x4b, 0x9f, 0x12, 0xf6, 0xdc, 0xe1, 0x3a, 0x73,
	0x60, 0xdf, 0x46, 0xa0, 0xf1, 0x05, 0x44, 0x28, 0x8d, 0x66, 0xba, 0x50, 0xc2, 0x9d, 0x90, 0x4c,
	0x17, 0x4a, 0xbc, 0xaf, 0x41, 0x71, 0xf0, 0xb5, 0x44, 0x05, 0x47, 0xc2, 0x25, 0x8c, 0x4c, 0x1c,
	0x89, 0xd7, 0x20, 0x28, 0x0e, 0xbe, 0xac, 0xa8, 0xe0, 0x48, 0xb8, 0xdc, 0x90, 0x89, 0x23, 0xf1,
	0x86, 0xc2, 0x57, 0x61, 0x9e, 0xfa, 0x8b, 0x88, 0xe1, 0x4c, 0xf6, 0x40, 0xc7, 0x01, 0x9c, 0x55,
	0xeb, 0xc4, 0xb5, 0x7f, 0x1d, 0x1e, 0x8b, 0x68, 0x27, 0x9a, 0x92, 0x24, 0xa2, 0x30, 0x9d, 0x65,
	0xd5, 0x7e, 0x17, 0x5a, 0xdc, 0x2b, 0xe9, 0xe1, 0x4a, 0xfb, 0x78, 0x2e, 0xb7, 0x12, 0x8e, 0xdb,
	0xbd, 0xa7, 0x15, 0x7a, 0x4c, 0x75, 0x72, 0x0f, 0xcc, 0xa5, 0x33, 0x56, 0x16, 0xce, 0xd4, 0x29,
	0xa9, 0x6f, 0xba, 0xf4, 0x9c, 0xc1, 0xbc, 0x2d, 0x97, 0xce, 0x58, 0xb5, 0x32, 0x53, 0xa7, 0xa4,
	0xec, 0xf8, 0x2a, 0x74, 0xe8, 0xe0, 0xb2, 0x53, 0xad, 0xbf, 0xfe, 0x3c, 0x9d, 0x3d, 0x48, 0x91,
	0x3a, 0x62, 0x6f, 0x5d, 0xa5, 0x0b, 0x57, 0xfc, 0x63, 0x04, 0x8f, 0x4f, 0x34, 0x87, 0x57, 0xc0,
	0x8d, 0x7c, 0xe2, 0x24, 0xcb, 0xdf, 0xe6, 0x21, 0x7a, 0x72, 0x3c, 0xdf, 0x43, 0xb0, 0xe8, 0xfa,
	0xd5, 0xa9, 0xe1, 0xb4, 0x96, 0x45, 0xb4, 0xac, 0x49, 0x9b, 0x54, 0x67, 0xeb, 0x6d, 0xa8, 0x77,
	0xe4, 0x50, 0xbe, 0x8f, 0x60, 0x29, 0xa0, 0x86, 0x50, 0x4e, 0x82, 0x3d, 0xcd, 0xb9, 0x7c, 0xe6,
	0xc5, 0x4a, 0x5c, 0xbd, 0x0d, 0xf5, 0x8e, 0xf1, 0x90, 0x20, 0xa4, 0xfe, 0x72, 0x86, 0x84, 0x58,
	0xb6, 0x3f, 0x67, 0x48, 0x90, 0xa4, 0xec, 0x85, 0x90, 0xa0, 0x82, 0x23, 0xa1, 0x68, 0x93, 0x33,
	0x24, 0x24, 0xe0, 0x08, 0x26, 0xa9, 0x02, 0x8e, 0x84, 0xea, 0x47, 0xce, 0x90, 0x20, 0xc1, 0xf1,
	0x03, 0x04, 0xc7, 0x98, 0x8f, 0x4c, 0x41, 0xf0, 0xd9, 0x93, 0xc7, 0x49, 0x64, 0xb5, 0x89, 0x5c,
	0x4e, 0x22, 0xaf, 0x3c, 0xbc, 0x81, 0xa0, 0x27, 0x01, 0x13, 0xb8, 0xed, 0x73, 0x6a, 0x82, 0x23,
	0xbe, 0x7b, 0xfe, 0x90, 0xbd, 0x39, 0xb6, 0x9f, 0x22, 0x58, 0x96, 0x60, 0x63, 0x2b, 0xec, 0xa6,
	0x9a, 0x68, 0x71, 0xa9, 0x7d, 0xf6, 0x30, 0x5d, 0x05, 0x48, 0x86, 0x69, 0x86, 0x20, 0x79, 0x4e,
	0x3e, 0x48, 0xc9, 0x19, 0xf3, 0x4c, 0x48, 0x69, 0x79, 0xef, 0x5f, 0x23, 0x58, 0x71, 0x59, 0xea,
	0x38, 0x84, 0xea, 0x8e, 0xeb, 0xd8, 0x3e, 0xae, 0xe7, 0x33, 0x57, 0xb3, 0xd4, 0x8c, 0x77, 0xef,
	0x53, 0x87, 0xee, 0xcf, 0x11, 0x8e, 0xa1, 0xc3, 0x38, 0x9b, 0xa4, 0x5f, 0xb5, 0xf5, 0x1c, 0xf6,
	0x46, 0x32, 0xd4, 0xbd, 0x33, 0x4a, 0x7d, 0xb8, 0xea, 0xd7, 0x11, 0x74, 0xc3, 0xe7, 0xea, 0xe1,
	0x24, 0x65, 0x91, 0xb9, 0x5d, 0x4f, 0xcb, 0x00, 0x67, 0x6e, 0xd7, 0xd3, 0xd3, 0xb2, 0x14, 0x57,
	0xf8, 0xc8, 0xad, 0x80, 0x2b, 0x2d, 0xe3, 0x9a, 0x89, 0x2b, 0x3d, 0xd9, 0x49, 0x71, 0x85, 0x4f,
	0xe3, 0x0a, 0xb8, 0xd2, 0xf2, 0x98, 0x99, 0xb8, 0xd2, 0x33, 0x90, 0x3f, 0xe2, 0x6b, 0x66, 0x1c,
	0xd4, 0x46, 0xee, 0x63, 0x53, 0x14, 0xd1, 0xe6, 0x21, 0x7a, 0x72, 0x38, 0x3f, 0xe1, 0x3b, 0xa0,
	0x18, 0x1c, 0xa2, 0xa9, 0x4b, 0x25, 0x0a, 0x0b, 0x53, 0x62, 0x3e, 0x8f, 0x06, 0x37, 0xb6, 0xd5,
	0x0f, 0x25, 0xa9, 0xf2, 0xa4, 0x10, 0x64, 0x09, 0xb7, 0x3c, 0x29, 0x04, 0x69, 0xae, 0xed, 0xc2,
	0xe9, 0x5b, 0xf3, 0xc1, 0xc7, 0xfc, 0xdb, 0x07, 0x95, 0x68, 0xb2, 0xeb, 0xf6, 0x0c, 0xfb, 0xb7,
	0x43, 0x67, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x18, 0xd7, 0xc4, 0xc2, 0x48, 0x00, 0x00,
}
