// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mserviceproject

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MServiceProjectClient is the client API for MServiceProject service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MServiceProjectClient interface {
	// create a new project
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// update an existing project
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	// delete an existing project
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	// get list of project names for this mservice id
	GetProjectNames(ctx context.Context, in *GetProjectNamesRequest, opts ...grpc.CallOption) (*GetProjectNamesResponse, error)
	// get project entity by name
	GetProjectByName(ctx context.Context, in *GetProjectByNameRequest, opts ...grpc.CallOption) (*GetProjectByNameResponse, error)
	// get project entity by id
	GetProjectById(ctx context.Context, in *GetProjectByIdRequest, opts ...grpc.CallOption) (*GetProjectByIdResponse, error)
	// get project entity wrapper by name
	GetProjectWrapperByName(ctx context.Context, in *GetProjectWrapperByNameRequest, opts ...grpc.CallOption) (*GetProjectWrapperByNameResponse, error)
	// get project entity wrapper by id
	GetProjectWrapperById(ctx context.Context, in *GetProjectWrapperByIdRequest, opts ...grpc.CallOption) (*GetProjectWrapperByIdResponse, error)
	// create a new status type
	CreateStatusType(ctx context.Context, in *CreateStatusTypeRequest, opts ...grpc.CallOption) (*CreateStatusTypeResponse, error)
	// update a status type
	UpdateStatusType(ctx context.Context, in *UpdateStatusTypeRequest, opts ...grpc.CallOption) (*UpdateStatusTypeResponse, error)
	// delete a status type
	DeleteStatusType(ctx context.Context, in *DeleteStatusTypeRequest, opts ...grpc.CallOption) (*DeleteStatusTypeResponse, error)
	// get status type by id
	GetStatusType(ctx context.Context, in *GetStatusTypeRequest, opts ...grpc.CallOption) (*GetStatusTypeResponse, error)
	// get all status types for this mservice id
	GetStatusTypes(ctx context.Context, in *GetStatusTypesRequest, opts ...grpc.CallOption) (*GetStatusTypesResponse, error)
	// create a new task
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	// update an existing task
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	// delete an existing task
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	// get a task by id
	GetTaskById(ctx context.Context, in *GetTaskByIdRequest, opts ...grpc.CallOption) (*GetTaskByIdResponse, error)
	// get a task with asspciations by id
	GetTaskWrapperById(ctx context.Context, in *GetTaskWrapperByIdRequest, opts ...grpc.CallOption) (*GetTaskWrapperByIdResponse, error)
	// reorder the positions of child tasks
	ReorderChildTasks(ctx context.Context, in *ReorderChildTasksRequest, opts ...grpc.CallOption) (*ReorderChildTasksResponse, error)
	// get list of tasks in project
	GetTasksByProject(ctx context.Context, in *GetTasksByProjectRequest, opts ...grpc.CallOption) (*GetTasksByProjectResponse, error)
	// create a new team member for the project
	CreateTeamMember(ctx context.Context, in *CreateTeamMemberRequest, opts ...grpc.CallOption) (*CreateTeamMemberResponse, error)
	// update an existing team member
	UpdateTeamMember(ctx context.Context, in *UpdateTeamMemberRequest, opts ...grpc.CallOption) (*UpdateTeamMemberResponse, error)
	// delete an existing team member
	DeleteTeamMember(ctx context.Context, in *DeleteTeamMemberRequest, opts ...grpc.CallOption) (*DeleteTeamMemberResponse, error)
	// get team member by id
	GetTeamMemberById(ctx context.Context, in *GetTeamMemberByIdRequest, opts ...grpc.CallOption) (*GetTeamMemberByIdResponse, error)
	// get team members by project
	GetTeamMemberByProject(ctx context.Context, in *GetTeamMemberByProjectRequest, opts ...grpc.CallOption) (*GetTeamMemberByProjectResponse, error)
	// get team members by task
	GetTeamMemberByTask(ctx context.Context, in *GetTeamMemberByTaskRequest, opts ...grpc.CallOption) (*GetTeamMemberByTaskResponse, error)
	// add a team member to a task
	AddTeamMemberToTask(ctx context.Context, in *AddTeamMemberToTaskRequest, opts ...grpc.CallOption) (*AddTeamMemberToTaskResponse, error)
	// remove a team member from a task
	RemoveTeamMemberFromTask(ctx context.Context, in *RemoveTeamMemberFromTaskRequest, opts ...grpc.CallOption) (*RemoveTeamMemberFromTaskResponse, error)
	// add to existing task hours for task and member
	AddTaskHours(ctx context.Context, in *AddTaskHoursRequest, opts ...grpc.CallOption) (*AddTaskHoursResponse, error)
	// create a new project role type
	CreateProjectRoleType(ctx context.Context, in *CreateProjectRoleTypeRequest, opts ...grpc.CallOption) (*CreateProjectRoleTypeResponse, error)
	// update an existing project role type
	UpdateProjectRoleType(ctx context.Context, in *UpdateProjectRoleTypeRequest, opts ...grpc.CallOption) (*UpdateProjectRoleTypeResponse, error)
	// delete an existing project role type
	DeleteProjectRoleType(ctx context.Context, in *DeleteProjectRoleTypeRequest, opts ...grpc.CallOption) (*DeleteProjectRoleTypeResponse, error)
	// get a project role type by id
	GetProjectRoleType(ctx context.Context, in *GetProjectRoleTypeRequest, opts ...grpc.CallOption) (*GetProjectRoleTypeResponse, error)
	// get all project role types for an mservice id
	GetProjectRoleTypes(ctx context.Context, in *GetProjectRoleTypesRequest, opts ...grpc.CallOption) (*GetProjectRoleTypesResponse, error)
	// get current server version and uptime - health check
	GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error)
}

type mServiceProjectClient struct {
	cc grpc.ClientConnInterface
}

func NewMServiceProjectClient(cc grpc.ClientConnInterface) MServiceProjectClient {
	return &mServiceProjectClient{cc}
}

func (c *mServiceProjectClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/create_project", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/update_project", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/delete_project", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetProjectNames(ctx context.Context, in *GetProjectNamesRequest, opts ...grpc.CallOption) (*GetProjectNamesResponse, error) {
	out := new(GetProjectNamesResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_project_names", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetProjectByName(ctx context.Context, in *GetProjectByNameRequest, opts ...grpc.CallOption) (*GetProjectByNameResponse, error) {
	out := new(GetProjectByNameResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_project_by_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetProjectById(ctx context.Context, in *GetProjectByIdRequest, opts ...grpc.CallOption) (*GetProjectByIdResponse, error) {
	out := new(GetProjectByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_project_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetProjectWrapperByName(ctx context.Context, in *GetProjectWrapperByNameRequest, opts ...grpc.CallOption) (*GetProjectWrapperByNameResponse, error) {
	out := new(GetProjectWrapperByNameResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_project_wrapper_by_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetProjectWrapperById(ctx context.Context, in *GetProjectWrapperByIdRequest, opts ...grpc.CallOption) (*GetProjectWrapperByIdResponse, error) {
	out := new(GetProjectWrapperByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_project_wrapper_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) CreateStatusType(ctx context.Context, in *CreateStatusTypeRequest, opts ...grpc.CallOption) (*CreateStatusTypeResponse, error) {
	out := new(CreateStatusTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/create_status_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) UpdateStatusType(ctx context.Context, in *UpdateStatusTypeRequest, opts ...grpc.CallOption) (*UpdateStatusTypeResponse, error) {
	out := new(UpdateStatusTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/update_status_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) DeleteStatusType(ctx context.Context, in *DeleteStatusTypeRequest, opts ...grpc.CallOption) (*DeleteStatusTypeResponse, error) {
	out := new(DeleteStatusTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/delete_status_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetStatusType(ctx context.Context, in *GetStatusTypeRequest, opts ...grpc.CallOption) (*GetStatusTypeResponse, error) {
	out := new(GetStatusTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_status_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetStatusTypes(ctx context.Context, in *GetStatusTypesRequest, opts ...grpc.CallOption) (*GetStatusTypesResponse, error) {
	out := new(GetStatusTypesResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_status_types", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/create_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/update_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/delete_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetTaskById(ctx context.Context, in *GetTaskByIdRequest, opts ...grpc.CallOption) (*GetTaskByIdResponse, error) {
	out := new(GetTaskByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_task_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetTaskWrapperById(ctx context.Context, in *GetTaskWrapperByIdRequest, opts ...grpc.CallOption) (*GetTaskWrapperByIdResponse, error) {
	out := new(GetTaskWrapperByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_task_wrapper_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) ReorderChildTasks(ctx context.Context, in *ReorderChildTasksRequest, opts ...grpc.CallOption) (*ReorderChildTasksResponse, error) {
	out := new(ReorderChildTasksResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/reorder_child_tasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetTasksByProject(ctx context.Context, in *GetTasksByProjectRequest, opts ...grpc.CallOption) (*GetTasksByProjectResponse, error) {
	out := new(GetTasksByProjectResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_tasks_by_project", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) CreateTeamMember(ctx context.Context, in *CreateTeamMemberRequest, opts ...grpc.CallOption) (*CreateTeamMemberResponse, error) {
	out := new(CreateTeamMemberResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/create_team_member", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) UpdateTeamMember(ctx context.Context, in *UpdateTeamMemberRequest, opts ...grpc.CallOption) (*UpdateTeamMemberResponse, error) {
	out := new(UpdateTeamMemberResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/update_team_member", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) DeleteTeamMember(ctx context.Context, in *DeleteTeamMemberRequest, opts ...grpc.CallOption) (*DeleteTeamMemberResponse, error) {
	out := new(DeleteTeamMemberResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/delete_team_member", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetTeamMemberById(ctx context.Context, in *GetTeamMemberByIdRequest, opts ...grpc.CallOption) (*GetTeamMemberByIdResponse, error) {
	out := new(GetTeamMemberByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_team_member_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetTeamMemberByProject(ctx context.Context, in *GetTeamMemberByProjectRequest, opts ...grpc.CallOption) (*GetTeamMemberByProjectResponse, error) {
	out := new(GetTeamMemberByProjectResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_team_member_by_project", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetTeamMemberByTask(ctx context.Context, in *GetTeamMemberByTaskRequest, opts ...grpc.CallOption) (*GetTeamMemberByTaskResponse, error) {
	out := new(GetTeamMemberByTaskResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_team_member_by_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) AddTeamMemberToTask(ctx context.Context, in *AddTeamMemberToTaskRequest, opts ...grpc.CallOption) (*AddTeamMemberToTaskResponse, error) {
	out := new(AddTeamMemberToTaskResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/add_team_member_to_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) RemoveTeamMemberFromTask(ctx context.Context, in *RemoveTeamMemberFromTaskRequest, opts ...grpc.CallOption) (*RemoveTeamMemberFromTaskResponse, error) {
	out := new(RemoveTeamMemberFromTaskResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/remove_team_member_from_task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) AddTaskHours(ctx context.Context, in *AddTaskHoursRequest, opts ...grpc.CallOption) (*AddTaskHoursResponse, error) {
	out := new(AddTaskHoursResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/add_task_hours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) CreateProjectRoleType(ctx context.Context, in *CreateProjectRoleTypeRequest, opts ...grpc.CallOption) (*CreateProjectRoleTypeResponse, error) {
	out := new(CreateProjectRoleTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/create_project_role_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) UpdateProjectRoleType(ctx context.Context, in *UpdateProjectRoleTypeRequest, opts ...grpc.CallOption) (*UpdateProjectRoleTypeResponse, error) {
	out := new(UpdateProjectRoleTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/update_project_role_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) DeleteProjectRoleType(ctx context.Context, in *DeleteProjectRoleTypeRequest, opts ...grpc.CallOption) (*DeleteProjectRoleTypeResponse, error) {
	out := new(DeleteProjectRoleTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/delete_project_role_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetProjectRoleType(ctx context.Context, in *GetProjectRoleTypeRequest, opts ...grpc.CallOption) (*GetProjectRoleTypeResponse, error) {
	out := new(GetProjectRoleTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_project_role_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetProjectRoleTypes(ctx context.Context, in *GetProjectRoleTypesRequest, opts ...grpc.CallOption) (*GetProjectRoleTypesResponse, error) {
	out := new(GetProjectRoleTypesResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_project_role_types", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceProjectClient) GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error) {
	out := new(GetServerVersionResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.project.MServiceProject/get_server_version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MServiceProjectServer is the server API for MServiceProject service.
// All implementations must embed UnimplementedMServiceProjectServer
// for forward compatibility
type MServiceProjectServer interface {
	// create a new project
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// update an existing project
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	// delete an existing project
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	// get list of project names for this mservice id
	GetProjectNames(context.Context, *GetProjectNamesRequest) (*GetProjectNamesResponse, error)
	// get project entity by name
	GetProjectByName(context.Context, *GetProjectByNameRequest) (*GetProjectByNameResponse, error)
	// get project entity by id
	GetProjectById(context.Context, *GetProjectByIdRequest) (*GetProjectByIdResponse, error)
	// get project entity wrapper by name
	GetProjectWrapperByName(context.Context, *GetProjectWrapperByNameRequest) (*GetProjectWrapperByNameResponse, error)
	// get project entity wrapper by id
	GetProjectWrapperById(context.Context, *GetProjectWrapperByIdRequest) (*GetProjectWrapperByIdResponse, error)
	// create a new status type
	CreateStatusType(context.Context, *CreateStatusTypeRequest) (*CreateStatusTypeResponse, error)
	// update a status type
	UpdateStatusType(context.Context, *UpdateStatusTypeRequest) (*UpdateStatusTypeResponse, error)
	// delete a status type
	DeleteStatusType(context.Context, *DeleteStatusTypeRequest) (*DeleteStatusTypeResponse, error)
	// get status type by id
	GetStatusType(context.Context, *GetStatusTypeRequest) (*GetStatusTypeResponse, error)
	// get all status types for this mservice id
	GetStatusTypes(context.Context, *GetStatusTypesRequest) (*GetStatusTypesResponse, error)
	// create a new task
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	// update an existing task
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	// delete an existing task
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	// get a task by id
	GetTaskById(context.Context, *GetTaskByIdRequest) (*GetTaskByIdResponse, error)
	// get a task with asspciations by id
	GetTaskWrapperById(context.Context, *GetTaskWrapperByIdRequest) (*GetTaskWrapperByIdResponse, error)
	// reorder the positions of child tasks
	ReorderChildTasks(context.Context, *ReorderChildTasksRequest) (*ReorderChildTasksResponse, error)
	// get list of tasks in project
	GetTasksByProject(context.Context, *GetTasksByProjectRequest) (*GetTasksByProjectResponse, error)
	// create a new team member for the project
	CreateTeamMember(context.Context, *CreateTeamMemberRequest) (*CreateTeamMemberResponse, error)
	// update an existing team member
	UpdateTeamMember(context.Context, *UpdateTeamMemberRequest) (*UpdateTeamMemberResponse, error)
	// delete an existing team member
	DeleteTeamMember(context.Context, *DeleteTeamMemberRequest) (*DeleteTeamMemberResponse, error)
	// get team member by id
	GetTeamMemberById(context.Context, *GetTeamMemberByIdRequest) (*GetTeamMemberByIdResponse, error)
	// get team members by project
	GetTeamMemberByProject(context.Context, *GetTeamMemberByProjectRequest) (*GetTeamMemberByProjectResponse, error)
	// get team members by task
	GetTeamMemberByTask(context.Context, *GetTeamMemberByTaskRequest) (*GetTeamMemberByTaskResponse, error)
	// add a team member to a task
	AddTeamMemberToTask(context.Context, *AddTeamMemberToTaskRequest) (*AddTeamMemberToTaskResponse, error)
	// remove a team member from a task
	RemoveTeamMemberFromTask(context.Context, *RemoveTeamMemberFromTaskRequest) (*RemoveTeamMemberFromTaskResponse, error)
	// add to existing task hours for task and member
	AddTaskHours(context.Context, *AddTaskHoursRequest) (*AddTaskHoursResponse, error)
	// create a new project role type
	CreateProjectRoleType(context.Context, *CreateProjectRoleTypeRequest) (*CreateProjectRoleTypeResponse, error)
	// update an existing project role type
	UpdateProjectRoleType(context.Context, *UpdateProjectRoleTypeRequest) (*UpdateProjectRoleTypeResponse, error)
	// delete an existing project role type
	DeleteProjectRoleType(context.Context, *DeleteProjectRoleTypeRequest) (*DeleteProjectRoleTypeResponse, error)
	// get a project role type by id
	GetProjectRoleType(context.Context, *GetProjectRoleTypeRequest) (*GetProjectRoleTypeResponse, error)
	// get all project role types for an mservice id
	GetProjectRoleTypes(context.Context, *GetProjectRoleTypesRequest) (*GetProjectRoleTypesResponse, error)
	// get current server version and uptime - health check
	GetServerVersion(context.Context, *GetServerVersionRequest) (*GetServerVersionResponse, error)
	mustEmbedUnimplementedMServiceProjectServer()
}

// UnimplementedMServiceProjectServer must be embedded to have forward compatible implementations.
type UnimplementedMServiceProjectServer struct {
}

func (UnimplementedMServiceProjectServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedMServiceProjectServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedMServiceProjectServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedMServiceProjectServer) GetProjectNames(context.Context, *GetProjectNamesRequest) (*GetProjectNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectNames not implemented")
}
func (UnimplementedMServiceProjectServer) GetProjectByName(context.Context, *GetProjectByNameRequest) (*GetProjectByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByName not implemented")
}
func (UnimplementedMServiceProjectServer) GetProjectById(context.Context, *GetProjectByIdRequest) (*GetProjectByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectById not implemented")
}
func (UnimplementedMServiceProjectServer) GetProjectWrapperByName(context.Context, *GetProjectWrapperByNameRequest) (*GetProjectWrapperByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectWrapperByName not implemented")
}
func (UnimplementedMServiceProjectServer) GetProjectWrapperById(context.Context, *GetProjectWrapperByIdRequest) (*GetProjectWrapperByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectWrapperById not implemented")
}
func (UnimplementedMServiceProjectServer) CreateStatusType(context.Context, *CreateStatusTypeRequest) (*CreateStatusTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatusType not implemented")
}
func (UnimplementedMServiceProjectServer) UpdateStatusType(context.Context, *UpdateStatusTypeRequest) (*UpdateStatusTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatusType not implemented")
}
func (UnimplementedMServiceProjectServer) DeleteStatusType(context.Context, *DeleteStatusTypeRequest) (*DeleteStatusTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatusType not implemented")
}
func (UnimplementedMServiceProjectServer) GetStatusType(context.Context, *GetStatusTypeRequest) (*GetStatusTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusType not implemented")
}
func (UnimplementedMServiceProjectServer) GetStatusTypes(context.Context, *GetStatusTypesRequest) (*GetStatusTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusTypes not implemented")
}
func (UnimplementedMServiceProjectServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedMServiceProjectServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedMServiceProjectServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedMServiceProjectServer) GetTaskById(context.Context, *GetTaskByIdRequest) (*GetTaskByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskById not implemented")
}
func (UnimplementedMServiceProjectServer) GetTaskWrapperById(context.Context, *GetTaskWrapperByIdRequest) (*GetTaskWrapperByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskWrapperById not implemented")
}
func (UnimplementedMServiceProjectServer) ReorderChildTasks(context.Context, *ReorderChildTasksRequest) (*ReorderChildTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderChildTasks not implemented")
}
func (UnimplementedMServiceProjectServer) GetTasksByProject(context.Context, *GetTasksByProjectRequest) (*GetTasksByProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasksByProject not implemented")
}
func (UnimplementedMServiceProjectServer) CreateTeamMember(context.Context, *CreateTeamMemberRequest) (*CreateTeamMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeamMember not implemented")
}
func (UnimplementedMServiceProjectServer) UpdateTeamMember(context.Context, *UpdateTeamMemberRequest) (*UpdateTeamMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeamMember not implemented")
}
func (UnimplementedMServiceProjectServer) DeleteTeamMember(context.Context, *DeleteTeamMemberRequest) (*DeleteTeamMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeamMember not implemented")
}
func (UnimplementedMServiceProjectServer) GetTeamMemberById(context.Context, *GetTeamMemberByIdRequest) (*GetTeamMemberByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamMemberById not implemented")
}
func (UnimplementedMServiceProjectServer) GetTeamMemberByProject(context.Context, *GetTeamMemberByProjectRequest) (*GetTeamMemberByProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamMemberByProject not implemented")
}
func (UnimplementedMServiceProjectServer) GetTeamMemberByTask(context.Context, *GetTeamMemberByTaskRequest) (*GetTeamMemberByTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamMemberByTask not implemented")
}
func (UnimplementedMServiceProjectServer) AddTeamMemberToTask(context.Context, *AddTeamMemberToTaskRequest) (*AddTeamMemberToTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeamMemberToTask not implemented")
}
func (UnimplementedMServiceProjectServer) RemoveTeamMemberFromTask(context.Context, *RemoveTeamMemberFromTaskRequest) (*RemoveTeamMemberFromTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamMemberFromTask not implemented")
}
func (UnimplementedMServiceProjectServer) AddTaskHours(context.Context, *AddTaskHoursRequest) (*AddTaskHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskHours not implemented")
}
func (UnimplementedMServiceProjectServer) CreateProjectRoleType(context.Context, *CreateProjectRoleTypeRequest) (*CreateProjectRoleTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectRoleType not implemented")
}
func (UnimplementedMServiceProjectServer) UpdateProjectRoleType(context.Context, *UpdateProjectRoleTypeRequest) (*UpdateProjectRoleTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectRoleType not implemented")
}
func (UnimplementedMServiceProjectServer) DeleteProjectRoleType(context.Context, *DeleteProjectRoleTypeRequest) (*DeleteProjectRoleTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectRoleType not implemented")
}
func (UnimplementedMServiceProjectServer) GetProjectRoleType(context.Context, *GetProjectRoleTypeRequest) (*GetProjectRoleTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectRoleType not implemented")
}
func (UnimplementedMServiceProjectServer) GetProjectRoleTypes(context.Context, *GetProjectRoleTypesRequest) (*GetProjectRoleTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectRoleTypes not implemented")
}
func (UnimplementedMServiceProjectServer) GetServerVersion(context.Context, *GetServerVersionRequest) (*GetServerVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerVersion not implemented")
}
func (UnimplementedMServiceProjectServer) mustEmbedUnimplementedMServiceProjectServer() {}

// UnsafeMServiceProjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MServiceProjectServer will
// result in compilation errors.
type UnsafeMServiceProjectServer interface {
	mustEmbedUnimplementedMServiceProjectServer()
}

func RegisterMServiceProjectServer(s grpc.ServiceRegistrar, srv MServiceProjectServer) {
	s.RegisterService(&MServiceProject_ServiceDesc, srv)
}

func _MServiceProject_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/create_project",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/update_project",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/delete_project",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetProjectNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetProjectNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_project_names",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetProjectNames(ctx, req.(*GetProjectNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetProjectByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetProjectByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_project_by_name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetProjectByName(ctx, req.(*GetProjectByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_project_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetProjectById(ctx, req.(*GetProjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetProjectWrapperByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectWrapperByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetProjectWrapperByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_project_wrapper_by_name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetProjectWrapperByName(ctx, req.(*GetProjectWrapperByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetProjectWrapperById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectWrapperByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetProjectWrapperById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_project_wrapper_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetProjectWrapperById(ctx, req.(*GetProjectWrapperByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_CreateStatusType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatusTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).CreateStatusType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/create_status_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).CreateStatusType(ctx, req.(*CreateStatusTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_UpdateStatusType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).UpdateStatusType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/update_status_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).UpdateStatusType(ctx, req.(*UpdateStatusTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_DeleteStatusType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatusTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).DeleteStatusType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/delete_status_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).DeleteStatusType(ctx, req.(*DeleteStatusTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetStatusType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetStatusType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_status_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetStatusType(ctx, req.(*GetStatusTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetStatusTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetStatusTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_status_types",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetStatusTypes(ctx, req.(*GetStatusTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/create_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/update_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/delete_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_task_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetTaskById(ctx, req.(*GetTaskByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetTaskWrapperById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskWrapperByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetTaskWrapperById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_task_wrapper_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetTaskWrapperById(ctx, req.(*GetTaskWrapperByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_ReorderChildTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderChildTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).ReorderChildTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/reorder_child_tasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).ReorderChildTasks(ctx, req.(*ReorderChildTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetTasksByProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksByProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetTasksByProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_tasks_by_project",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetTasksByProject(ctx, req.(*GetTasksByProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_CreateTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).CreateTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/create_team_member",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).CreateTeamMember(ctx, req.(*CreateTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_UpdateTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).UpdateTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/update_team_member",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).UpdateTeamMember(ctx, req.(*UpdateTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_DeleteTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).DeleteTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/delete_team_member",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).DeleteTeamMember(ctx, req.(*DeleteTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetTeamMemberById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamMemberByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetTeamMemberById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_team_member_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetTeamMemberById(ctx, req.(*GetTeamMemberByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetTeamMemberByProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamMemberByProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetTeamMemberByProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_team_member_by_project",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetTeamMemberByProject(ctx, req.(*GetTeamMemberByProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetTeamMemberByTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamMemberByTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetTeamMemberByTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_team_member_by_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetTeamMemberByTask(ctx, req.(*GetTeamMemberByTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_AddTeamMemberToTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamMemberToTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).AddTeamMemberToTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/add_team_member_to_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).AddTeamMemberToTask(ctx, req.(*AddTeamMemberToTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_RemoveTeamMemberFromTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamMemberFromTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).RemoveTeamMemberFromTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/remove_team_member_from_task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).RemoveTeamMemberFromTask(ctx, req.(*RemoveTeamMemberFromTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_AddTaskHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).AddTaskHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/add_task_hours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).AddTaskHours(ctx, req.(*AddTaskHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_CreateProjectRoleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRoleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).CreateProjectRoleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/create_project_role_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).CreateProjectRoleType(ctx, req.(*CreateProjectRoleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_UpdateProjectRoleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRoleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).UpdateProjectRoleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/update_project_role_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).UpdateProjectRoleType(ctx, req.(*UpdateProjectRoleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_DeleteProjectRoleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRoleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).DeleteProjectRoleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/delete_project_role_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).DeleteProjectRoleType(ctx, req.(*DeleteProjectRoleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetProjectRoleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRoleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetProjectRoleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_project_role_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetProjectRoleType(ctx, req.(*GetProjectRoleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetProjectRoleTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRoleTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetProjectRoleTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_project_role_types",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetProjectRoleTypes(ctx, req.(*GetProjectRoleTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceProject_GetServerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceProjectServer).GetServerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.project.MServiceProject/get_server_version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceProjectServer).GetServerVersion(ctx, req.(*GetServerVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MServiceProject_ServiceDesc is the grpc.ServiceDesc for MServiceProject service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MServiceProject_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.gaterace.mservice.project.MServiceProject",
	HandlerType: (*MServiceProjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create_project",
			Handler:    _MServiceProject_CreateProject_Handler,
		},
		{
			MethodName: "update_project",
			Handler:    _MServiceProject_UpdateProject_Handler,
		},
		{
			MethodName: "delete_project",
			Handler:    _MServiceProject_DeleteProject_Handler,
		},
		{
			MethodName: "get_project_names",
			Handler:    _MServiceProject_GetProjectNames_Handler,
		},
		{
			MethodName: "get_project_by_name",
			Handler:    _MServiceProject_GetProjectByName_Handler,
		},
		{
			MethodName: "get_project_by_id",
			Handler:    _MServiceProject_GetProjectById_Handler,
		},
		{
			MethodName: "get_project_wrapper_by_name",
			Handler:    _MServiceProject_GetProjectWrapperByName_Handler,
		},
		{
			MethodName: "get_project_wrapper_by_id",
			Handler:    _MServiceProject_GetProjectWrapperById_Handler,
		},
		{
			MethodName: "create_status_type",
			Handler:    _MServiceProject_CreateStatusType_Handler,
		},
		{
			MethodName: "update_status_type",
			Handler:    _MServiceProject_UpdateStatusType_Handler,
		},
		{
			MethodName: "delete_status_type",
			Handler:    _MServiceProject_DeleteStatusType_Handler,
		},
		{
			MethodName: "get_status_type",
			Handler:    _MServiceProject_GetStatusType_Handler,
		},
		{
			MethodName: "get_status_types",
			Handler:    _MServiceProject_GetStatusTypes_Handler,
		},
		{
			MethodName: "create_task",
			Handler:    _MServiceProject_CreateTask_Handler,
		},
		{
			MethodName: "update_task",
			Handler:    _MServiceProject_UpdateTask_Handler,
		},
		{
			MethodName: "delete_task",
			Handler:    _MServiceProject_DeleteTask_Handler,
		},
		{
			MethodName: "get_task_by_id",
			Handler:    _MServiceProject_GetTaskById_Handler,
		},
		{
			MethodName: "get_task_wrapper_by_id",
			Handler:    _MServiceProject_GetTaskWrapperById_Handler,
		},
		{
			MethodName: "reorder_child_tasks",
			Handler:    _MServiceProject_ReorderChildTasks_Handler,
		},
		{
			MethodName: "get_tasks_by_project",
			Handler:    _MServiceProject_GetTasksByProject_Handler,
		},
		{
			MethodName: "create_team_member",
			Handler:    _MServiceProject_CreateTeamMember_Handler,
		},
		{
			MethodName: "update_team_member",
			Handler:    _MServiceProject_UpdateTeamMember_Handler,
		},
		{
			MethodName: "delete_team_member",
			Handler:    _MServiceProject_DeleteTeamMember_Handler,
		},
		{
			MethodName: "get_team_member_by_id",
			Handler:    _MServiceProject_GetTeamMemberById_Handler,
		},
		{
			MethodName: "get_team_member_by_project",
			Handler:    _MServiceProject_GetTeamMemberByProject_Handler,
		},
		{
			MethodName: "get_team_member_by_task",
			Handler:    _MServiceProject_GetTeamMemberByTask_Handler,
		},
		{
			MethodName: "add_team_member_to_task",
			Handler:    _MServiceProject_AddTeamMemberToTask_Handler,
		},
		{
			MethodName: "remove_team_member_from_task",
			Handler:    _MServiceProject_RemoveTeamMemberFromTask_Handler,
		},
		{
			MethodName: "add_task_hours",
			Handler:    _MServiceProject_AddTaskHours_Handler,
		},
		{
			MethodName: "create_project_role_type",
			Handler:    _MServiceProject_CreateProjectRoleType_Handler,
		},
		{
			MethodName: "update_project_role_type",
			Handler:    _MServiceProject_UpdateProjectRoleType_Handler,
		},
		{
			MethodName: "delete_project_role_type",
			Handler:    _MServiceProject_DeleteProjectRoleType_Handler,
		},
		{
			MethodName: "get_project_role_type",
			Handler:    _MServiceProject_GetProjectRoleType_Handler,
		},
		{
			MethodName: "get_project_role_types",
			Handler:    _MServiceProject_GetProjectRoleTypes_Handler,
		},
		{
			MethodName: "get_server_version",
			Handler:    _MServiceProject_GetServerVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MServiceProject.proto",
}
